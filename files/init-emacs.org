#+TITLE:        Init Emacs
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2019-09-10 ter]
#+DATE-UPDATED: [2019-09-22 dom]
#+PROPERTY: header-args :tangle yes

* Starting of Configuration
:PROPERTIES:
:ID:       5a9267f1-2ad4-498c-95c7-8254533d6124
:END:


Just print an indication of the beginning of the configuration. So
later I can find what was actually loaded and configuration.
#+BEGIN_SRC emacs-lisp
  (message " ~~~~~~~~~~~~~~~~~~~~~ Start of Configuration ")

  (setq debug-on-error t)
  (setq debug-on-quit t)
#+END_SRC

Import basic libraries that will be used throughout this
configuration.
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)

#+END_SRC

* Show Benchmark of Initialization
:PROPERTIES:
:ID:       4dcace5f-a499-424b-b49d-7c4f0fb98736
:END:

It is really important (actually, it is not so important) to show how
long it took to initialize the configuration.

It is not really important because normally I will open emacs once or
twice a day. Even if it took 1 minute to start it would not be so
devastating as people think it is. 

The benchmark is around 8 seconds without ssd and 2 seconds
with. After packages are downloaded and all.
#+BEGIN_SRC emacs-lisp
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+END_SRC
* Choose Configuration Files to Get Elisp From
:PROPERTIES:
:ID:       d2dfcbb6-395c-4f71-8aa1-4a14ede64214
:END:

Create initial sequence of configuration files. Load them in this
particular order because the creation of variables and functions need
to happen before they are called.
#+BEGIN_SRC emacs-lisp
  (defvar my/emacs-config-dir "~/emacsConfig/"
    "Directory where configuration is stored")

  (defvar my/inits-config '("init-setup-package.org"
                            "init-basicConfig.org"
                            "init-keyBinding.org")
    "Initial order of configurations to be loaded because they have
    dependencies among the others")

#+END_SRC

Function to get correct files. Otherwise it will try to load
directories and others files.
#+BEGIN_SRC emacs-lisp
  (defun regexp-filter (regexp list)
    "Filter LIST of strings with REGEXP.
  Returning a new list with only the strings left."
    (let (new)
      (dolist (string list)
        (when (string-match regexp string)
          (setq new (cons string new))))
      (nreverse new)))

#+END_SRC

Finally find all configuration files and put them into the sequence.
#+BEGIN_SRC emacs-lisp
  ;; Find the configuration files to load.
  (let ((files (regexp-filter "\.org$" (directory-files my/emacs-config-dir))))
    (dolist (file files)

      ;; If file is not in the list, include it.
      (unless (cl-member file my/inits-config :test 'string=)
        (setq my/inits-config (append my/inits-config (list file))))))


  (defvar my/config-org-files my/inits-config
    "Files from which emacs will be applied `tangle-config-org` function
    To transform those org files into acturla elisp files.")

  ;; Put this files into a path where is possible to load them later.
  (setq load-path (cons (expand-file-name my/emacs-config-dir)
                        load-path ))
#+END_SRC

* Code to Tangle .org to .el Files
:PROPERTIES:
:ID:       b79d9249-4491-4c83-830b-09f7874224ec
:END:


This code is not mine, but I really like it and I'm using it. It makes
changing things in Emacs's configuration really simple.

You just need a source block with emacs-lisp as its engine and it
automatically parses it to a .el file every

The parsing part happens when:
- The elfile does not exist 
- The orgfile is newer than the elfile

#+BEGIN_SRC emacs-lisp
  ;;; bootstrap.el
  ;;
  ;; Author: Adrien Brochard
  ;; URL:    https://github.com/abrochard/emacs-config
  ;;
  ;; kickstart the config by pulling the latest
  ;; and tangle the org files into .el
  ;;
  ;; Heavily inspired by the great
  ;; http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/
  ;; Thanks a lot to him

  (defvar config-load-path (file-name-directory my/emacs-config-dir))
  (defvar config-use-fallback nil)

  ;; This is GPLv2. If you still don't know the details, read
  ;; http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html

  (defun tangle-section-canceled ()
    "Return t if the current section header was CANCELED, else nil."
    (save-excursion
      (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
          (string-prefix-p "CANCELED" (match-string 1))
        nil)))

  ;; This uses partially derived code from ob-core.el. So this snippet
  ;; is GPLv3 or later. If you still don't know the details, read
  ;; http://www.gnu.org/licenses/

  (defun tangle-config-org (orgfile elfile)
    "This function will write all source blocks from =config.org= into
  =config.el= that are ...

  - not marked as :tangle no
  - have a source-code of =emacs-lisp=
  - doesn't have the todo-marker CANCELED"
    (let* ((body-list ())
           (gc-cons-threshold most-positive-fixnum)
           (org-babel-src-block-regexp
            (concat
             ;; (1) indentation                 (2) lang
             "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
             ;; (3) switches
             "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
             ;; (4) header arguments
             "\\([^\n]*\\)\n"
             ;; (5) body
             "\\([^\000]*?\n\\)??[ \t]*#\\+end_src")))

      (with-temp-buffer
        (insert-file-contents orgfile)
        (goto-char (point-min))
        (while (re-search-forward org-babel-src-block-regexp nil t)
          (let ((lang (match-string 2))
                (args (match-string 4))
                (body (match-string 5))
                (canc (tangle-section-canceled)))
            (when (and (string= lang "emacs-lisp")
                       (not (string-match-p ":tangle\\s-+no" args))
                       (not canc))
              (add-to-list 'body-list body)))))

      (with-temp-file elfile
        (insert
         (format ";; Don't edit this file, edit %s instead ...\n\n" orgfile))
        (apply 'insert (reverse body-list)))

      (message "Wrote %s ..." elfile)))

  (defun bootstrap-config ()
    "Tangle files if needed."
    (dolist (file my/config-org-files)
      (let ((orgfile (concat config-load-path file))
            (elfile (concat config-load-path
                            "elisp/"
                            (replace-regexp-in-string "\\.org" ".el" file))))
      
        ;; Check if tangle needs to happen.
        (when (or (not (file-exists-p elfile))
                  (file-newer-than-file-p orgfile elfile))
          (tangle-config-org orgfile elfile))

        ;; Either way loads the elfile.
        (load-file elfile))))

  (defun bootstrap-config-fallback ()
    "Just in case."
    (package-initialize)
    (require 'org)
    (dolist (file my/config-org-files)
      (org-babel-load-file (concat config-load-path file))))


  (if (not config-use-fallback)
      (bootstrap-config)
    (bootstrap-config-fallback))

#+END_SRC

* Custom Variables
:PROPERTIES:
:ID:       ef388bd1-de62-48a6-bb65-bd94a84fc399
:END:

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     (quote
      (org-contacts rjsx-mode ggtags js2-mode magit zenburn-theme yasnippet use-package try string-inflection rainbow-delimiters org-plus-contrib nyan-mode nov multiple-cursors monokai-theme markdown-mode ledger-mode keyfreq hydra helm-swoop helm-descbinds flycheck expand-region exec-path-from-shell elmacro diminish define-word counsel company-jedi))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

#+END_SRC
* Ending of Configuration
:PROPERTIES:
:ID:       14dc97cd-9322-4941-9d3d-925193417d3c
:END:

Print an indication of the end of the configuration. So I can find
initialization messages between the begin and end of this Config.
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error nil)
  (setq debug-on-quit nil)

  (message " ~~~~~~~~~~~~~~~~~~~~~ End of Configuration ")
#+END_SRC

