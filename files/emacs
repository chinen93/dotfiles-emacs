;;===================================================================
;; Initial Configuration for EM
;; ====================================================================

(require 'cl-lib)

(defvar my/emacs-config-dir "~/emacsConfig/"
  "Directory where configuration is stored")

(defvar my/inits-config '("init-setup-package.org"
                          "init-basicConfig.org"
                          "init-keyBinding.org")
  "Initial order of configurations to be loaded because they have
dependencies among the others")

(defun regexp-filter (regexp list)
  "Filter LIST of strings with REGEXP."
  (let (new)
    (dolist (string list)
      (when (string-match regexp string)
        (setq new (cons string new))))
    (nreverse new)))

(dolist (file (regexp-filter "\.org$" (directory-files my/emacs-config-dir)))
  (unless (cl-member file my/inits-config :test 'string=)
    (setq my/inits-config (append my/inits-config (list file)))))

(defvar my/config-org-files my/inits-config
  "Files from which emacs will be applied `tangle-config-org` function
To transform those org files into acturla elisp files.")

(setq load-path (cons (expand-file-name my/emacs-config-dir)
                      load-path ))

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(message " Inicialização das Configurações ")

;;; bootstrap.el
;;
;; Author: Adrien Brochard
;; URL:    https://github.com/abrochard/emacs-config
;;
;; kickstart the config by pulling the latest
;; and tangle the org files into .el
;;
;; Heavily inspired by the great
;; http://www.holgerschurig.de/en/emacs-efficiently-untangling-elisp/
;; Thanks a lot to him

(defvar config-load-path (file-name-directory my/emacs-config-dir))
(defvar config-use-fallback nil)

;; Startup metrics
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; This is GPLv2. If you still don't know the details, read
;; http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html

(defun tangle-section-canceled ()
  "Return t if the current section header was CANCELED, else nil."
  (save-excursion
    (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
        (string-prefix-p "CANCELED" (match-string 1))
      nil)))

;; This uses partially derived code from ob-core.el. So this snippet
;; is GPLv3 or later. If you still don't know the details, read
;; http://www.gnu.org/licenses/

(defun tangle-config-org (orgfile elfile)
  "This function will write all source blocks from =config.org= into
=config.el= that are ...

- not marked as :tangle no
- have a source-code of =emacs-lisp=
- doesn't have the todo-marker CANCELED"
  (let* ((body-list ())
         (gc-cons-threshold most-positive-fixnum)
         (org-babel-src-block-regexp
          (concat
           ;; (1) indentation                 (2) lang
           "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
           ;; (3) switches
           "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
           ;; (4) header arguments
           "\\([^\n]*\\)\n"
           ;; (5) body
           "\\([^\000]*?\n\\)??[ \t]*#\\+end_src")))

    (with-temp-buffer
      (insert-file-contents orgfile)
      (goto-char (point-min))
      (while (re-search-forward org-babel-src-block-regexp nil t)
        (let ((lang (match-string 2))
              (args (match-string 4))
              (body (match-string 5))
              (canc (tangle-section-canceled)))
          (when (and (string= lang "emacs-lisp")
                     (not (string-match-p ":tangle\\s-+no" args))
                     (not canc))
            (add-to-list 'body-list body)))))

    (with-temp-file elfile
      (insert
       (format ";; Don't edit this file, edit %s instead ...\n\n" orgfile))
      (apply 'insert (reverse body-list)))

    (message "Wrote %s ..." elfile)))

(defun bootstrap-config ()
  "Tangle files if needed."
  (dolist (file my/config-org-files)
    (let ((orgfile
           (concat config-load-path file))
          (elfile
           (concat config-load-path
                   "elisp/"
                   (replace-regexp-in-string "\\.org" ".el" file))))
      (when (or (not (file-exists-p elfile))
                (file-newer-than-file-p orgfile elfile))
        (tangle-config-org orgfile elfile))
      (load-file elfile))))

(defun bootstrap-config-fallback ()
  "Just in case."
  (package-initialize)
  (require 'org)
  (dolist (file my/config-org-files)
    (org-babel-load-file (concat config-load-path file))))


(if (not config-use-fallback)
    (bootstrap-config)
  (bootstrap-config-fallback))

(message " Fim das Configurações ")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-contacts-files (quote ("~/Dropbox/Contacts.org")) t)
 '(package-selected-packages
   (quote
    (org-contacts rjsx-mode ggtags js2-mode magit zenburn-theme yasnippet use-package try string-inflection rainbow-delimiters org-plus-contrib nyan-mode nov multiple-cursors monokai-theme markdown-mode ledger-mode keyfreq hydra helm-swoop helm-descbinds flycheck expand-region exec-path-from-shell elmacro diminish define-word counsel company-jedi))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
