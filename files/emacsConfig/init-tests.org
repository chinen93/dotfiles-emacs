
#+TITLE:        Configuration Tests
#+AUTHOR:       Pedro Chinen
#+EMAIL:        ph.u.chinen@gmail.com
#+DATE-CREATED: [2024-01-10 Wed]
#+DATE-UPDATED: [2024-04-11 Thu]

* Tests Example
:PROPERTIES:
:Created:  2024-04-10
:END:

Example of test creation
#+begin_src emacs-lisp

  (ert-deftest addition-test ()
    :tags '(example)

    (should (= (+ 1 2) 3)))


  (ert-deftest test--divide-by-zero ()
    :tags '(example)

    (should-error (/ 1 0)
                  :type 'arith-error))

  ;; (defun determine-next-action ()
  ;;   (if (file-exists-p "death-star-plans.org")
  ;;       'bring-him-the-passengers
  ;;     'tear-this-ship-apart))

  ;; (ert-deftest file-check-test--true ()
  ;;   (cl-flet ((file-exists-p (file) t))
  ;;     (should (eq (determine-next-action) 'bring-him-the-passengers))))

  ;; (ert-deftest file-check-test--false ()
  ;;   (cl-flet ((file-exists-p (file) nil))
  ;;     (should (eq (determine-next-action) 'tear-this-ship-apart))))

#+end_src

Run only tests with a specific tag
#+begin_src emacs-lisp :tangle no

  (ert-run-tests-interactively '(tag example))

#+end_src

* Test Helper Functions
:PROPERTIES:
:Created:  2024-04-06
:END:

** Reload Emacs Configuration to Test
:PROPERTIES:
:Created:  2024-04-10
:END:

#+begin_src emacs-lisp :tangle no

  (bootstrap-config)

#+end_src

** Run all Tests
:PROPERTIES:
:Created:  2024-04-11
:END:

#+begin_src emacs-lisp :tangle no

  (defun my-ert-run-all-tests ()
    "Run all ERT tests"

    (interactive)
    (ert-run-tests-interactively  't))
#+end_src

** Create Persistent Test File
:PROPERTIES:
:Created:  2024-04-10
:END:
#+begin_src emacs-lisp

  (defun my-test-create-file (filename &optional body)
    "Create file for tests on .emacs.d directory"

    (let* ((file (my--test-get-fullpath-filename filename))
           (buffer (find-file-noselect file 'nowarn))
           (body (or body "")))
      (with-current-buffer buffer
        (point-min)
        (insert body)
        (write-file file nil))))

  (defun my-test-delete-file (filename path)
    "Delete file and buffer"

    (ignore-errors
      (kill-buffer filename)
      (delete-file filepath)))

  ;; ============ Private Functions ============

  (defun my--test-get-fullpath-filename (filename)
    "Get fullpath filename"
    (concat my/config-emacs.d-folder "tests/" filename))

  ;; =========================================================

  (ert-deftest my-test--test-get-full-path-filename ()
    "Test get full path filename"
    :tags '(my-test-functions)

    (let* ((filename "filename")
           (filepath (my--test-get-fullpath-filename filename)))
        (should (file-name-absolute-p filepath))))

  (ert-deftest my-test--test-create-file ()
    "Test Creation of Test File

  Delete test file after checking"
    :tags '(my-test-functions)

    (let* ((filename "filename")
           (filepath (my--test-get-fullpath-filename filename)))
      (unwind-protect
          (progn 
            (should (not (file-exists-p filepath)))
            (my-test-create-file filename)
            (should (file-exists-p filepath)))

         (my-test-delete-file filename filepath))))

  (ert-deftest my-test--test-create-file--with-body ()
    "Test Creation of Test File

  Delete test file after checking"
    :tags '(my-test-functions)

     (let* ((filename "filename")
            (filepath (my--test-get-fullpath-filename filename))
            (body "TEST\nBODY"))

       (unwind-protect
           (progn
             (should (not (file-exists-p filepath)))
             (my-test-create-file filename body)
             (should (file-exists-p filepath))
             (with-current-buffer filename
               (should (string-match-p body (buffer-string)))))

         (my-test-delete-file filename filepath))))
#+end_src

* Function: defvar-check-filename
:PROPERTIES:
:Created:  2024-04-06
:END:

#+begin_src emacs-lisp :tangle no

  (ert-run-tests-interactively '(tag defvar-check-filename))

#+end_src

** Tests
:PROPERTIES:
:Created:  2024-04-09
:END:

#+begin_src emacs-lisp

  (ert-deftest my-test--defvar-check-filename--invalid ()
    "Test if file name is an invalid file"
    :tags '(defvar-check-filename)

    (should-error (my--defvar-check-filename "invalid-filename")))

  (ert-deftest my-test--defvar-check-filename--valid ()
    "Test if file name is a valid file"
    :tags '(defvar-check-filename)

    (let* ((buffer-name "defvar-check-filename")
           (buffer (my-test-create-file buffer-name))
           (filepath (my--test-get-fullpath-filename buffer-name)))
      (unwind-protect
          (should (my--defvar-check-filename filepath))
        (my-test-delete-file buffer-name filepath))))
#+end_src

* Function: Link with Custom ID
:PROPERTIES:
:Created:  2024-04-11
:END:

#+begin_src emacs-lisp :tangle no

  (ert-run-tests-interactively '(tag link-custom-id))

#+end_src

** Tests
:PROPERTIES:
:Created:  2024-04-11
:END:

#+begin_src emacs-lisp

  (defvar my-test/denote-identifier
    (concat "#+title:      Test \n"
            "#+identifier: 20240411T185646")
    "Denote information for test purposes")

  (ert-deftest my-test--my-denote-link-get-or-create-custom-id--create ()
    "Test if custom id is created and returned"
    :tags '(link-custom-id)

    ;; (my-denote-link-get-or-create-custom-id)

    (should 't))

#+end_src


