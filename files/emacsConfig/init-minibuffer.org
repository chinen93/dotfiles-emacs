#+TITLE:        Minibuffer Configuration
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2023-12-06 Wed]
#+DATE-UPDATED: [2023-12-26 Tue]

* General Configuration
:PROPERTIES:
:Created:  2023-12-07
:END:
#+begin_src emacs-lisp

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src

* Packages
:PROPERTIES:
:Created:  2023-12-07
:END:
** CANCELED Package: Ivy
:PROPERTIES:
:Created:  2023-12-06
:END:

Emacs is a text editor which don't want to bother the user. So
normally it doesn't have an auto completion function. However for
editing text is important to have some sort of help. That one reason
for using a completion package is essential to make it a better
environment.

One of those packages is the [[https://github.com/abo-abo/swiper][Ivy]] with its [[https://oremacs.com/swiper/][manual]]. I'll let it
introduce itself:

Ivy is an interactive interface for completion in Emacs. Emacs uses
completion mechanism in a variety of contexts: code, menus, commands,
variables, functions, etc. Completion entails listing, sorting,
filtering, previewing, and applying actions on selected items. When
active, ivy-mode completes the selection process by narrowing
available choices while previewing in the mini buffer. Selecting the
final candidate is either through simple keyboard character inputs or
through powerful regular expressions.

#+BEGIN_SRC emacs-lisp

  (require-package 'ivy)
  (require-package 'counsel)

  (ivy-mode 1)

#+END_SRC

Number of result lines to display
#+BEGIN_SRC emacs-lisp

  (setq ivy-height 10)

#+END_SRC

Does not count candidates
#+BEGIN_SRC emacs-lisp

  (setq ivy-count-format "")

#+END_SRC

No regexp by default
#+BEGIN_SRC emacs-lisp

  (setq ivy-initial-inputs-alist nil)

#+END_SRC

Configure regexp engine.
#+BEGIN_SRC emacs-lisp

  (setq ivy-re-builders-alist
	;; allow input not in order
	'((t   . ivy--regex-ignore-order)))

#+END_SRC

#+begin_src emacs-lisp

  (when (boundp 'my/keymap)
    (define-key my/keymap (kbd "C-f") 'swiper-thing-at-point)
    (define-key my/keymap (kbd "M-x") 'counsel-M-x)
  
    (define-key my/keymap (kbd "M-v M-f") 'counsel-find-file)
  
    (message "Keybindings for Ivy loaded "))
#+end_src

** Package: Vertico
:PROPERTIES:
:Created:  2023-12-06
:END:

Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.

Link: https://github.com/minad/vertico

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map minibuffer-local-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (defun vertico--swap-annotations (result)
    ;; Move annotations only for files
    (if minibuffer-completing-file-name
        (mapcar (lambda (x)
                  ;; Swap prefix/suffix annotations
                  (list (car x) (concat (string-trim-left (caddr x)) " ") (cadr x)))
                result)
      result))
  (advice-add #'vertico--affixate :filter-return #'vertico--swap-annotations)

#+end_src

** Package: Marginalia
:PROPERTIES:
:Created:  2023-12-07
:END:

Marginalia are marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates.

Link: https://github.com/minad/marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  (setq vertico-multiform-commands
        '(("\\`execute-extended-command" unobtrusive
           (vertico-flat-annotate . t)
           (marginalia-annotator-registry (command marginalia-annotate-binding)))))

#+end_src

*** CANCELED Icons
:PROPERTIES:
:Created:  2023-12-07
:END:

#+begin_src emacs-lisp

  (use-package all-the-icons-completion
    :ensure t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :config (all-the-icons-completion-mode))

#+end_src

** Package: Orderless
:PROPERTIES:
:Created:  2023-12-07
:END:

This package provides an orderless completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

Link: https://github.com/oantolin/orderless

#+begin_src emacs-lisp

  (use-package orderless
    :ensure t
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless basic)))

#+end_src

** Package: Consult
:PROPERTIES:
:Created:  2023-12-07
:END:

Consult provides search and navigation commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates.

Link: https://github.com/minad/consult

#+begin_src emacs-lisp

  (use-package consult
    :after vertico
    :ensure t
    :bind ("C-f" . consult-line)
    :custom

    ;;; Loads the previous search term
    ;;(defvar my-consult-line-map
    ;;  (let ((map (make-sparse-keymap)))
    ;;    (define-key map "\C-f" #'previous-history-element)
    ;;    map))
    ;;(consult-customize consult-line :keymap my-consult-line-map)

    (defun consult-line-symbol-at-point ()
      (interactive)
      (consult-line (thing-at-point 'symbol))))

#+end_src

** Package: Embark
:PROPERTIES:
:Created:  2023-12-07
:END:

Embark: Emacs Mini-Buffer Actions Rooted in Keymaps

Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers.

Link: https://github.com/oantolin/embark

#+begin_src emacs-lisp

(use-package embark
    :ensure t
    :bind (([remap describe-bindings] . embark-bindings)
           ("C-." . embark-act)  )
    :custom
    (prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (defun +embark-live-vertico ()
    "Shrink Vertico minibuffer when `embark-live' is active."
    (when-let (win (and (string-prefix-p "*Embark Live" (buffer-name))
                        (active-minibuffer-window)))
      (with-selected-window win
        (when (and (bound-and-true-p vertico--input)
                   (fboundp 'vertico-multiform-unobtrusive))
          (vertico-multiform-unobtrusive)))))

  (add-hook 'embark-collect-mode-hook #'+embark-live-vertico)


  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
      The which-key help message will show the type and value of the
      current target followed by an ellipsis if there are further
      targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "..." "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)


#+end_src

* Provide File
:PROPERTIES:
:ID:       0a01efe1-3948-4017-b344-38ecef7b2a48
:END:
#+BEGIN_SRC emacs-lisp
  (provide 'init-minibuffer)
#+END_SRC



