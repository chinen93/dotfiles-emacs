#+TITLE:        Org Mode Configurations
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2018-09-24 Mon]
#+DATE-UPDATED: [2019-03-14 qui]

[[https://orgmode.org/][Org Mode]]

Org is a mode for keeping notes, maintaining TODO lists, and project planning with a fast and effective plain-text system. It also is an authoring system with unique support for literate programming and reproducible research.

* Load Package: Org Mode
:PROPERTIES:
:ID:       5ed0ba9d-5499-4dd2-9aa9-db12bb9d4684
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org)

#+END_SRC

* Default Files
:PROPERTIES:
:ID:       aa2a4b3e-8702-4bd2-9c4b-89bed3173229
:END:
#+BEGIN_SRC emacs-lisp
  ;; Set dropbox folder
  (defvar my/org-dropbox-folder "~/Dropbox/"
    "Dropbox directory")

  ;; Only set this org variable if there no other variable for the dropbox folder
  (let ((file my/dropbox-folder))
    (when (and (boundp 'file)
               (file-directory-p file))
      (setq my/org-dropbox-folder my/dropbox-folder)))

#+END_SRC

* IDs
:PROPERTIES:
:ID:       bf94cf7d-f656-48ad-b7fe-c6ef9310e1ec
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org-id)

  ;; If `org-store-link` is called directly don't create IDs if it already exist
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;; Change File which holds all IDs
  ;; (setq org-id-locations-file
  ;;       (concat my/dropbox-folder ".org-id-location"))

#+END_SRC

* Tags, Keywords, Headings
:PROPERTIES:
:ID:       d1668e0a-a17a-4fc0-8c60-342b5f5c7891
:END:
#+BEGIN_SRC emacs-lisp
  ;; Place tags directly after headline text, with only one space in between
  (setq org-tags-column 0)

  ;; Record a note when TODO item is DONE
  (setq org-log-done 'note)
  (setq org-log-repeat 'note)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "WORKING(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

  ;; Follows links when press <ENTER> on them
  (setq org-return-follows-link t)

  ;; Hide the leading "*" from the headline
  (setq org-startup-indented t
        org-hide-leading-stars t)

#+END_SRC

* Refile
:PROPERTIES:
:ID:       cd5cd9be-2d38-496d-85e8-92ecf29ef0f4
:END:
#+BEGIN_SRC emacs-lisp
  ;; Provide refile targets as paths. Level3 headlin = level1/level2/leve3
  (setq org-refile-use-outline-path 'file)

  ;; Load paths to refile in a single go
  (setq org-outline-path-complete-in-steps nil)

  (setq org-refile-targets
        '((nil :maxlevel . 3)))
#+END_SRC

* Agenda
:PROPERTIES:
:ID:       741ef6f4-614b-4b2e-b5cf-28a13f9ee9e6
:END:

** Set Agenda Files
:PROPERTIES:
:ID:       d0b21712-a701-4681-80b7-d805941835e6
:END:
Set org agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files nil)

  (add-to-list 'org-agenda-files
               (concat my/org-dropbox-folder "Organizador.org"))

  (add-to-list 'org-agenda-files
               (concat my/org-dropbox-folder "Notes/Projetos.org"))

  (add-to-list 'org-agenda-files
               (concat my/org-dropbox-folder "Contacts.org"))

#+END_SRC

** Configure some informations
:PROPERTIES:
:ID:       a75d5c64-9879-4700-b1ad-cd69d1983c7b
:END:

Skip tasks done in daily/weekly agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)

#+END_SRC


Default duration for appointments that only have a starting time.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-default-appointment-duration 60)

#+END_SRC

Follow link on agenda with mouse click
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-mouse-1-follows-link t)

#+END_SRC

Skip non-rechable files in `org-agenda-files`
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-unavailable-files t)

#+END_SRC

Agenda show next 7 days and previous 3 days
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 10)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "-3d")

#+END_SRC

** Custom Commands
:PROPERTIES:
:ID:       9f11523a-b7c1-432a-94b4-d406ca487263
:END:

Remove all Org Mode agenda commands. To only show my custom commands.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands nil)

#+END_SRC

*** All DONE Itens from This Week
:PROPERTIES:
:ID:       2970d122-05c8-47bf-8f60-0ac4e25bcf04
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom command to show done task from previous week
   '("d" "DONE from this week"
     ;; Use normal agenda
     ((agenda ""
              ;; Put some configurations on this agenda
              ;; Show closed tasks and show 7 days starting today
              ((org-agenda-log-mode-items '(closed))
               (org-agenda-span 7)
               (org-agenda-start-day "-6d")
               (org-agenda-show-log t)
               (org-agenda-window-setup 'other-window))))
     nil))

#+END_SRC

*** Two Weeks in Advance and All TODO Itens
:PROPERTIES:
:ID:       6aa45574-713d-47b0-8756-bd352b8f2e00
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda that show all the TODO tasks
   '("m" "Agenda and all TODO's"
     ((agenda ""
              ((org-agenda-span 16)
               (org-agenda-start-day "-2d")))
      (alltodo "" nil))
     nil))

#+END_SRC

*** Current Working Tasks and Immediate Calendar
:PROPERTIES:
:ID:       d0be7bcc-8135-4264-91b2-8f16ac337bb2
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show working todo
   '("w" "Working on tasks"
     ((agenda ""
              ((org-agenda-span 4)
               (org-agenda-start-day "-1d")))
      (todo "WORKING" nil))
     nil nil))

#+END_SRC

*** All Task in Notes Directory
:PROPERTIES:
:ID:       0acfba9f-08a3-4e8b-b625-2547e4837630
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show agenda and todo for every note
   `("n" "All TODO's in Notes"
     ((alltodo ""
               ((org-agenda-files
                `(,(concat my/org-dropbox-folder "Notes/"))))))
     nil))

#+END_SRC

*** All Task in Emacs Config Directory
:PROPERTIES:
:ID:       0acfba9f-08a3-4e8b-b625-2547e4837630
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show agenda and todo for every note
   `("e" "All TODO's in Emacs Config Directory"
     ((alltodo ""
               ((org-agenda-files
                `(,my/emacs-config-dir)))))
     nil))

#+END_SRC

*** Notes "Viagens" Agenda
:PROPERTIES:
:ID:       a7b76845-2081-4783-abea-1c507242f4f4
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show agenda and todo for every note
   `("v" "'Viagens' Notes"
     ((agenda ""
              ((org-agenda-files
                `(,(concat my/org-dropbox-folder "Notes/viagens.org")))))
      (alltodo ""
               ((org-agenda-files
                 `(,(concat my/org-dropbox-folder "Notes/viagens.org"))))))
     nil))
#+END_SRC

*** TODO All Year 
:PROPERTIES:
:ID:       dfe5baf8-f51e-43ef-b7f9-9fc5fb54ce89
:END:

* Structure Templates
:PROPERTIES:
:ID:       abdb3d61-d414-492b-bf87-d670c5f52d82
:END:

Templates for source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist nil)

  (add-to-list
   'org-structure-template-alist
   `("l"
     ,(concat "#+BEGIN_SRC emacs-lisp\n"
              "?\n"
              "#+END_SRC")))

  (add-to-list
   'org-structure-template-alist
   `("ln"
     ,(concat "#+BEGIN_SRC emacs-lisp :tangle no\n"
              "?\n"
              "#+END_SRC")))

  (add-to-list
   'org-structure-template-alist
   `("s"
     ,(concat "#+BEGIN_SRC sh\n"
              "?\n"
              "#+END_SRC")))

  (add-to-list
   'org-structure-template-alist
    `("t"
     ,(concat "#+BEGIN_SRC text\n"
              "?\n"
              "#+END_SRC")))

#+END_SRC

* Babel Load Languages
:PROPERTIES:
:ID:       3187a406-3e9b-4ddb-839b-4385deca07f1
:END:

Create Variable to hold all languages that I want to be enabled
#+BEGIN_SRC emacs-lisp
  (defvar my/org-languages nil
    "List of languages enabled in Org Mode Blocks")

#+END_SRC

** Add support for Emacs Lisp
:PROPERTIES:
:ID:       e3868b22-706d-48c2-8545-5f79a16dfe30
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'my/org-languages
   '(emacs-lisp . t))

#+END_SRC

** Add support for Shell
:PROPERTIES:
:ID:       81fa4906-c501-4377-aa4c-70e5fee03387
:END:
Shell has changed somehow and depending of your
current `org-version' or `emacs-version' it needs to load '(shell . t)
or '(sh . t)
https://emacs.stackexchange.com/questions/21366/should-i-have-removed-shell-t-to-clear-an-ob-shell-initialization-error/21368
#+BEGIN_SRC emacs-lisp
  (let ((shell-list '(shell . t))
        (sh-list '(sh . t))
        (elem nil))

    (if (version< org-version "9")
        (setq elem sh-list)
      (setq elem shell-list))

    (add-to-list
     'my/org-languages
     elem))

#+END_SRC

** Add support for Python
:PROPERTIES:
:ID:       933d309e-8a98-498c-a57f-a1fcc28b41f7
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'my/org-languages
   '(python . t))

#+END_SRC

** Add support for Latex
:PROPERTIES:
:ID:       b8b399fd-dcac-4b0b-9d85-9b35e2a29f5c
:END:
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'my/org-languages
   '(latex . t))

#+END_SRC

** Effectively loads languages
:PROPERTIES:
:ID:       f8a20334-6856-448b-976e-dcd7a9f5ea5c
:END:
#+BEGIN_SRC emacs-lisp
  ;; Support to languages in #-begin_src #end_src code
  (org-babel-do-load-languages
   'org-babel-load-languages
   my/org-languages)
#+END_SRC

* Functions
:PROPERTIES:
:ID:       82c60e4e-7fc8-44bc-aa49-c947d43dc8b0
:END:

** What to Do in This Week
:PROPERTIES:
:ID:       88aaa898-d7c3-4d43-ad8b-b51ca1e8145b
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-week-and-todo-list ()
      "Create a list of this week and todo items"
      (interactive)

      ;; Add a theme.
      ;; (load-theme 'tango)

      ;; Get the Agenda indexed by 'n'
      (org-agenda nil "n")

      ;; Remove other windows so this is the only one visible
      (delete-other-windows))
#+END_SRC

** Update Org Timestamp
:PROPERTIES:
:ID:       3a743891-504e-4e4d-941b-953fd05ccc6b
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-update-org-timestamp ()
    "Search for the string 'DATE-UPDATED' and chage the inactive
  timestamp after it."

    ;; Check to see if this is an Org mode file
    (when (and (eq major-mode 'org-mode)
               (eq buffer-read-only nil))

      ;; Save excursion so the pointer isn't changed
      (save-excursion

        ;; Go to the first positon in the buffer
        (goto-char (point-min))

        ;; Search for the string DATE-UPDATED: [2018-09-23 Sun])
        (if (not (null (search-forward-regexp "DATE-UPDATED: " nil t)))

            ;; Save the begin to where to delete.
            (let ((begin (point)))

              ;; Search for the next ']' the end of a date.
              (search-forward "]")

              ;; Delete the date described as [year-month=day DayofWeek]
              (delete-region begin (point))

              ;; Insert date of today
              (org-insert-time-stamp (current-time) nil t))

          ;; Text is not found: Message and do nothing
          (message "DATE-UPDATED does not exist in this buffer")))))

#+END_SRC

** Add Ids to All Headings
:PROPERTIES:
:ID:       5ce021fa-2ef7-4232-ad68-b06c9bc71b85
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-add-ids-to-all-headings ()
    "Insert ids to every heading in the file. If it already has one do nothing"
    (interactive)
    (save-excursion
      (goto-char (point-max))
      (while (outline-previous-heading)
        (org-id-get-create))))

#+END_SRC

** Toggle Timestamp (Inactive to Active, vice versa)
:PROPERTIES:
:ID:       67c751e1-8e7a-4e38-af90-8201bea4de0e
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-org-toggle-timestamp(beforeList afterList)
    "Toggle a time stamp to active and inactive, vice versa"

    ;; Don't change the cursor position
    (save-excursion

      ;; Narrow to the begin-end of line
      (narrow-to-region (progn
                          (beginning-of-line)
                          (point))
                        (progn
                          (end-of-line)
                          (point)))

      ;; search for begin-end of DATE
      (let ((begin (search-backward (first beforeList) nil t))
            (end (search-forward (first (rest beforeList)) nil t)))

        ;; if a DATE is found
        (if (and (not (not begin)) (not (not end)))
            (progn

              ;; change character for the appropriate one
              (delete-region begin (+ begin 1))
              (goto-char begin)
              (insert (first afterList))

              ;; change character for the appropriate one
              (goto-char end)
              (delete-region (- end 1) end)
              (insert (first (rest afterList))))))

      ;; Widen buffer
      (widen)))


  (defun my-org-active-timestamp ()
    "Active a timestamp, change [date] to <date>"
    (interactive)

    (my-org-toggle-timestamp '("[" "]") '("<" ">")))


  (defun my-org-inactive-timestamp ()
    "Inactive a timestamp, change <date> to [date]"
    (interactive)

    (my-org-toggle-timestamp '("<" ">") '("[" "]")))
#+END_SRC

** Id Remove Entry
:PROPERTIES:
:ID:       c331d738-e710-46ae-aed1-11b5a9902c14
:END:
#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/30303/how-to-remove-org-id-drawer-location-file-entry
  (defun org-id-remove-entry ()
  "Remove/delete the ID entry and update the databases.
  Update the `org-id-locations' global hash-table, and update the
  `org-id-locations-file'.  `org-id-track-globally' must be `t`."
  (interactive)
    (save-excursion
      (org-back-to-heading t)
      (when (org-entry-delete (point) "ID")
        (org-id-update-id-locations nil 'silent))))
#+END_SRC

** Style Current Text
:PROPERTIES:
:ID:       c2de9ca1-9ca8-4e99-a408-37d581a6c720
:END:

*** Function to Get Begin and End Points
:PROPERTIES:
:ID:       4d9b080c-039b-4685-a03b-86cdfe2bb575
:END:


#+BEGIN_SRC emacs-lisp
  (defun my-begin-word-or-region ()
    "Get begin of WORD or REGION"

    (save-excursion
      ;; Get begin point of word
      (let ((point-begin
             (progn
               (forward-whitespace -1)
               (forward-char)
               (point))))

        ;; If region is active. Get its begin point
        (when (region-active-p)
          (setq point-begin (region-beginning)))

        ;; Return point
        point-begin)))

  (defun my-end-word-or-region ()
    "Get end of WORD or REGION"

    (save-excursion
      ;; Get end point of word
      (let ((point-end
             (progn
               (forward-whitespace 1)
               (backward-char)
               (point))))

        ;; If region is active. Get its end point
        (when (region-active-p)
          (setq point-end (region-end)))

        ;; Return point
        point-end)))
#+END_SRC

*** Function to Insert Char into Begin and End Point
:PROPERTIES:
:ID:       aed3fcdf-a49f-4d0e-b727-555fac20e6ba
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-insert-string (begin end string)
    "Insert STRING in BEGIN and END point"

    ;; Put in the STRING in END position first so BEGIN position
    ;; won't be changed when adding STRING
    (goto-char end)
    (insert string)

    (goto-char begin)
    (insert string))
#+END_SRC

*** Italic
:PROPERTIES:
:ID:       438050d9-4708-4e5a-9d0b-2a1aaa3dcbdb
:END:

#+BEGIN_SRC emacs-lisp
  (defun my-org-italic-current-text ()
    "Make current WORD or REGION italic"
    (interactive)

    ;; Don't change the actual point
    (save-excursion

      ;; Set region of current word
      (let ((point-begin (my-begin-word-or-region))
            (point-end (my-end-word-or-region)))

        (my-insert-string point-begin point-end "/"))))
#+END_SRC

*** Bold
:PROPERTIES:
:ID:       713b4d63-ff3a-479e-b884-70585d4e66f4
:END:

#+BEGIN_SRC emacs-lisp
  (defun my-org-bold-current-text ()
    "Make current WORD or REGION bold"
    (interactive)

    ;; Don't change the actual point
    (save-excursion

      ;; Set region of current word
      (let ((point-begin (my-begin-word-or-region))
            (point-end (my-end-word-or-region)))

        (my-insert-string point-begin point-end "*"))))
#+END_SRC

* Hooks
:PROPERTIES:
:ID:       97b4a8b1-8d0b-4f54-9c25-44439c58c3f9
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-org-hook-function ()
    "Check this file is an org file, is it is execute some functions"

    ;; Add hook before save
    (add-hook 'before-save-hook 'my-update-org-timestamp))


  ;; Add hook to org mode
  (add-hook 'org-mode-hook 'my-org-hook-function)
  (add-hook 'org-insert-heading-hook 'org-id-get-create)

  (add-hook 'org-mode-hook
            ;; Create hook when org mode is enabled
            (lambda()
              (visual-line-mode t)
              ))

#+END_SRC

* CANCELED Load Package: Org Contacts
CLOSED: [2018-11-23 sex 21:51]
:PROPERTIES:
:ID:       89910a66-0e0b-4e9d-a4da-61386dd74c51
:END:
- State "DONE"       from "WORKING"    [2018-11-23 sex 21:51]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-contacts
    :after org
    :custom (org-contacts-files '("~/Dropbox/Contacts.org")))
#+END_SRC

* Capture Templates
:PROPERTIES:
:ID:       d860bf58-caf5-4869-b56b-f74a9150a38a
:END:

Remove all capture templates.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates nil)

#+END_SRC

** Template Structure
:PROPERTIES:
:ID:       a9e7947a-772f-476d-8365-8a7b50acde28
:END:

[[id:25a25f76-eb2c-4203-8a75-6a49751f0cc7][Capture Template Structures]]

** Contact Template
:PROPERTIES:
:ID:       fb54fa73-e4c7-4653-acd4-8357b9adb7bd
:END:
#+BEGIN_SRC emacs-lisp
  (let ((filename (concat my/org-dropbox-folder "Contacts.org"))
        (template "* %^{Nome}
  :PROPERTIES:
  :EMAIL: %^{Email}
  :NOTE: %^{NOTE}
  :END:
  <%^{yyyy-mm-dd} +1y>"))

    (add-to-list
     'org-capture-templates
     `("c" "Contact" entry
       (file ,filename)
       ,template
       :empty-lines 1
       :kill-buffer
       :unarrowed)))

#+END_SRC

** Project Template
:PROPERTIES:
:ID:       47c0325c-9ce4-4c35-b376-6836fab45957
:END:

#+BEGIN_SRC emacs-lisp
  (let ((filename (concat my/org-dropbox-folder "Notes/Projetos.org"))
        (template "* TODO %^{Project Idea}
  %T
  %a
  %?
  "))

      (add-to-list
       'org-capture-templates
       `("p" "Project Idea" entry
         (file ,filename)
         ,template
         :empty-lines 1)))

#+END_SRC

** Ledger Template
:PROPERTIES:
:ID:       67197e33-4b61-4639-94ef-d0b4df9c6fd3
:END:

#+BEGIN_SRC emacs-lisp
  (let ((filename (concat my/org-dropbox-folder "Ledger.ledger"))
        (template "%(my-org-pick-date) Dinheiro
  Expenses:Dinheiro                      R$ %^{50.00}
  Assets:Bank:Caixa"))

    (add-to-list
     'org-capture-templates
     `("D" "Ledger Dinheiro" plain
       (file ,filename)
       ,template
       :empty-lines 1)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let ((filename (concat my/org-dropbox-folder "Ledger.ledger"))
        (template "%(my-org-pick-date) %^{Empresa}
  Expenses:                      R$ %^{50.00}
  Assets:Bank:Bradesco"))

    (add-to-list
     'org-capture-templates
     `("T" "Ledger Transação" plain
       (file ,filename)
       ,template
       :empty-lines 1)))

#+END_SRC
