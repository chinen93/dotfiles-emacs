#+TITLE:        Org Mode Configurations
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2018-09-24 Mon]
#+DATE-UPDATED: [2018-10-04 qui]

[[https://orgmode.org/][Org Mode]] 

Org is a mode for keeping notes, maintaining TODO lists, and project planning with a fast and effective plain-text system. It also is an authoring system with unique support for literate programming and reproducible research. 

* Load Package: Org Mode
:PROPERTIES:
:ID:       5ed0ba9d-5499-4dd2-9aa9-db12bb9d4684
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org)

#+END_SRC

* Default Files
:PROPERTIES:
:ID:       aa2a4b3e-8702-4bd2-9c4b-89bed3173229
:END:
#+BEGIN_SRC emacs-lisp
  ;; Set dropbox folder
  (setq org-dropbox-folder "~/Dropbox/")

  ;; Only set this org variable if there no other variable for the dropbox folder
  (unless (null my-dropbox-folder)
    (setq org-dropbox-folder my-dropbox-folder))

#+END_SRC

* Tags, Keywords, Headings, IDs
:PROPERTIES:
:ID:       d1668e0a-a17a-4fc0-8c60-342b5f5c7891
:END:
#+BEGIN_SRC emacs-lisp
  (require 'org-id)

  ;; If `org-store-link` is called directly don't create IDs if it already exist
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;; Place tags directly after headline text, with only one space in between
  (setq org-tags-column 0)

  ;; Record a note when TODO item is DONE
  (setq org-log-done 'note)
  (setq org-log-repeat 'note)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "WORKING(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

  ;; Follows links when press <ENTER> on them
  (setq org-return-follows-link t)

  ;; Hide the leading "*" from the headline
  (setq org-startup-indented t
        org-hide-leading-stars t)
#+END_SRC

* Refile
:PROPERTIES:
:ID:       cd5cd9be-2d38-496d-85e8-92ecf29ef0f4
:END:
#+BEGIN_SRC emacs-lisp
  ;; Provide refile targets as paths. Level3 headlin = level1/level2/leve3
  (setq org-refile-use-outline-path 'file)

  ;; Load paths to refile in a single go
  (setq org-outline-path-complete-in-steps nil)

  (setq org-refile-targets
        '((nil :maxlevel . 3)))
#+END_SRC

* Agenda
:PROPERTIES:
:ID:       741ef6f4-614b-4b2e-b5cf-28a13f9ee9e6
:END:

** Set Agenda Files
:PROPERTIES:
:ID:       d0b21712-a701-4681-80b7-d805941835e6
:END:
Set org agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files nil)

  (add-to-list 'org-agenda-files 
               (concat org-dropbox-folder "Organizador.org"))

  (add-to-list 'org-agenda-files 
               (concat org-dropbox-folder "Notes/Projetos.org"))

  (add-to-list 'org-agenda-files 
               (concat org-dropbox-folder "Contacts.org"))

#+END_SRC

** Configure some informations
:PROPERTIES:
:ID:       a75d5c64-9879-4700-b1ad-cd69d1983c7b
:END:

Skip tasks done in daily/weekly agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)

#+END_SRC


Default duration for appointments that only have a starting time.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-default-appointment-duration 60)

#+END_SRC

Follow link on agenda with mouse click
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-mouse-1-follows-link t)

#+END_SRC

Skip non-rechable files in `org-agenda-files`
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-unavailable-files t)

#+END_SRC

Agenda show next 7 days and previous 3 days
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 10)
  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-start-day "-3d")

#+END_SRC

** Custom Commands
:PROPERTIES:
:ID:       9f11523a-b7c1-432a-94b4-d406ca487263
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands nil)

  (add-to-list
   'org-agenda-custom-commands

   ;; Custom command to show done task from previous week
   '("b" "DONE from this week"
     ;; Use normal agenda
     ((agenda ""
              ;; Put some configurations on this agenda
              ;; Show closed tasks and show 7 days starting today
              ((org-agenda-log-mode-items '(closed))
               (org-agenda-span 7)
               (org-agenda-start-day "-6d")
               (org-agenda-show-log t)
               (org-agenda-window-setup 'other-window))))
     nil))

  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda that show all the TODO tasks
   '("n" "Agenda and all TODO's"
     ((agenda ""
              ((org-agenda-span 16)
               (org-agenda-start-day "-2d")))
      (alltodo "" nil))
     nil))


  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show working todo
   '("w" "Working on tasks"
     ((agenda ""
              ((org-agenda-span 4)
               (org-agenda-start-day "-1d")))
      (todo "WORKING" nil))
     nil nil))

  (add-to-list
   'org-agenda-custom-commands

   ;; Custom agenda to show agenda and todo for every note
   '("l" "Agenda and all TODO's"
     ((agenda ""
              ((org-agenda-files '("~/Dropbox/Organizador.org"
                                   "~/Dropbox/Notes"))))
      (alltodo ""
               ((org-agenda-files '("~/Dropbox/Organizador.org"
                                    "~/Dropbox/Notes")))))
     nil))
#+END_SRC

* Structure Templates
:PROPERTIES:
:ID:       abdb3d61-d414-492b-bf87-d670c5f52d82
:END:

Templates for source blocks
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist nil)

  (add-to-list 
   'org-structure-template-alist
   `("l"
     ,(concat "#+BEGIN_SRC emacs-lisp\n"
              "?\n"
              "#+END_SRC")))

  (add-to-list 
   'org-structure-template-alist
   `("s"
     ,(concat "#+BEGIN_SRC sh\n"
              "?\n"
              "#+END_SRC")))

  (add-to-list 
   'org-structure-template-alist
    `("t"
     ,(concat "#+BEGIN_SRC text\n"
              "?\n"
              "#+END_SRC")))

#+END_SRC

* Babel Load Languages
:PROPERTIES:
:ID:       3187a406-3e9b-4ddb-839b-4385deca07f1
:END:
#+BEGIN_SRC emacs-lisp
  ;; Support to languages in #-begin_src #end_src code
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (latex . t)))
#+END_SRC

* Functions
:PROPERTIES:
:ID:       82c60e4e-7fc8-44bc-aa49-c947d43dc8b0
:END:

** What to Do in This Week
:PROPERTIES:
:ID:       88aaa898-d7c3-4d43-ad8b-b51ca1e8145b
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-week-and-todo-list ()
      "Create a list of this week and todo items"
      (interactive)

      ;; Add a theme.
      ;; (load-theme 'tango)

      ;; Get the Agenda indexed by 'n'
      (org-agenda nil "n")

      ;; Remove other windows so this is the only one visible
      (delete-other-windows))
#+END_SRC

** Update Org Timestamp
:PROPERTIES:
:ID:       3a743891-504e-4e4d-941b-953fd05ccc6b
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-update-org-timestamp ()
    "Search for the string 'DATE-UPDATED' and chage the inactive
  timestamp after it."

    ;; Check to see if this is an Org mode file
    (when (and (eq major-mode 'org-mode)
               (eq buffer-read-only nil))

      ;; Save excursion so the pointer isn't changed
      (save-excursion

        ;; Go to the first positon in the buffer
        (goto-char (point-min))

        ;; Search for the string DATE-UPDATED: [2018-09-23 Sun])
        (if (not (null (search-forward-regexp "DATE-UPDATED: " nil t)))

            ;; Save the begin to where to delete.
            (let ((begin (point)))

              ;; Search for the next ']' the end of a date.
              (search-forward "]")

              ;; Delete the date described as [year-month=day DayofWeek]
              (delete-region begin (point))

              ;; Insert date of today
              (org-insert-time-stamp (current-time) nil t))

          ;; Text is not found: Message and do nothing
          (message "DATE-UPDATED does not exist in this buffer")))))

#+END_SRC

** Add Ids to All Headings
:PROPERTIES:
:ID:       5ce021fa-2ef7-4232-ad68-b06c9bc71b85
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-add-ids-to-all-headings ()
    "Insert ids to every heading in the file. If it already has one do nothing"
    (interactive)
    (save-excursion
      (goto-char (point-max))
      (while (outline-previous-heading)
        (org-id-get-create))))

#+END_SRC

** Toggle Timestamp (Inactive to Active, vice versa)
:PROPERTIES:
:ID:       67c751e1-8e7a-4e38-af90-8201bea4de0e
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-org-toggle-timestamp(beforeList afterList)
    "Toggle a time stamp to active and inactive, vice versa"

    ;; Don't change the cursor position
    (save-excursion

      ;; Narrow to the begin-end of line
      (narrow-to-region (progn
                          (beginning-of-line)
                          (point))
                        (progn
                          (end-of-line)
                          (point)))

      ;; search for begin-end of DATE
      (let ((begin (search-backward (first beforeList) nil t))
            (end (search-forward (first (rest beforeList)) nil t)))

        ;; if a DATE is found
        (if (and (not (not begin)) (not (not end)))
            (progn

              ;; change character for the appropriate one
              (delete-region begin (+ begin 1))
              (goto-char begin)
              (insert (first afterList))

              ;; change character for the appropriate one
              (goto-char end)
              (delete-region (- end 1) end)
              (insert (first (rest afterList))))))

      ;; Widen buffer
      (widen)))


  (defun my-org-active-timestamp ()
    "Active a timestamp, change [date] to <date>"
    (interactive)

    (my-org-toggle-timestamp '("[" "]") '("<" ">")))


  (defun my-org-inactive-timestamp ()
    "Inactive a timestamp, change <date> to [date]"
    (interactive)

    (my-org-toggle-timestamp '("<" ">") '("[" "]")))
#+END_SRC

** Id Remove Entry
:PROPERTIES:
:ID:       c331d738-e710-46ae-aed1-11b5a9902c14
:END:
#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/30303/how-to-remove-org-id-drawer-location-file-entry
  (defun org-id-remove-entry ()
  "Remove/delete the ID entry and update the databases.
  Update the `org-id-locations' global hash-table, and update the
  `org-id-locations-file'.  `org-id-track-globally' must be `t`."
  (interactive)
    (save-excursion
      (org-back-to-heading t)
      (when (org-entry-delete (point) "ID")
        (org-id-update-id-locations nil 'silent))))
#+END_SRC

* Hooks
:PROPERTIES:
:ID:       97b4a8b1-8d0b-4f54-9c25-44439c58c3f9
:END:
#+BEGIN_SRC emacs-lisp
  (defun my-org-hook-function ()
    "Check this file is an org file, is it is execute some functions"

    ;; Add hook before save
    (add-hook 'before-save-hook 'my-update-org-timestamp))


  ;; Add hook to org mode
  (add-hook 'org-mode-hook 'my-org-hook-function)
  (add-hook 'org-insert-heading-hook 'org-id-get-create)

  (add-hook 'org-mode-hook
            ;; Create hook when org mode is enabled
            (lambda()
              (visual-line-mode t)
              ))

#+END_SRC

* Load Package: Org Contacts
:PROPERTIES:
:ID:       89910a66-0e0b-4e9d-a4da-61386dd74c51
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-contacts
    :ensure nil
    :after org
    :custom (org-contacts-files '("~/Dropbox/Contacts.org")))
#+END_SRC

* Capture Templates
:PROPERTIES:
:ID:       d860bf58-caf5-4869-b56b-f74a9150a38a
:END:

Remove all capture templates.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates nil) 

#+END_SRC

** Template Structure
:PROPERTIES:
:ID:       a9e7947a-772f-476d-8365-8a7b50acde28
:END:

[[id:25a25f76-eb2c-4203-8a75-6a49751f0cc7][Capture Template Structures]]

** Contact Template
:PROPERTIES:
:ID:       fb54fa73-e4c7-4653-acd4-8357b9adb7bd
:END:
#+BEGIN_SRC emacs-lisp
  (defvar my/org-contacts-template 
    "* %(org-contacts-template-name)
  :PROPERTIES:
  :BIRTHDAY: %^{yyyy-mm-dd}
  :EMAIL: %(org-contacts-template-email)
  :NOTE: %^{NOTE}
  :END:"
    "Template for org-contacts.")

  (add-to-list
   'org-capture-templates
   `("c" "Contact" entry (file "~/Dropbox/Contacts.org")
     ,my/org-contacts-template
     :empty-lines 1
     :kill-buffer
     :unarrowed))

#+END_SRC

** Project Template
:PROPERTIES:
:ID:       47c0325c-9ce4-4c35-b376-6836fab45957
:END:

#+BEGIN_SRC emacs-lisp
  (defvar my/org-project-template 
    "* TODO %^{Project Idea}
  %T
  %f
  %?"
    "Template for new project")

  (add-to-list
   'org-capture-templates
   `("p" "Project Idea" entry (file "~/Dropbox/Notes/Projetos.org")
     ,my/org-project-template
     :empty-lines 1))

#+END_SRC

