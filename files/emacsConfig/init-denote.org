#+TITLE:        Denote Configuration
#+AUTHOR:       Pedro Chinen
#+EMAIL:        ph.u.chinen@gmail.com
#+DATE-CREATED: [2023-06-30 Fri]
#+DATE-UPDATED: [2023-10-19 Thu]

Base configuration for Denote
#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :custom
    (denote-directory (expand-file-name my/notes-directory))
    )

  (add-hook 'dired-mode-hook #'denote-dired-mode)
#+end_src

* Custom Functions
:PROPERTIES:
:Created:  2023-10-19
:END:
** Organizating Projects
:PROPERTIES:
:Created:  2023-10-04
:END:

*** Regexp to match projects
:PROPERTIES:
:Created:  2023-10-09
:END:
#+begin_src emacs-lisp
  (defvar my/regexp-denote-working-projects (rx (and "_projetos")
                                                (and (zero-or-more anything))
                                                (and "_working"))
    "Regexp to search for working projects on a Denote folder")

  (defvar my/regexp-denote-maybe-projects (rx (and "_maybe")
                                              (and (zero-or-more anything))
                                              (and "_projetos"))
    "Regexp to search for maybe projects on a Denote folder")
#+end_src
*** List Maybe/Working Projects
:PROPERTIES:
:Created:  2023-10-04
:END:

#+begin_src emacs-lisp
  (defun my-denote-link-add-working-projects ()
    "Use command `denote-link-add-links' with '_projetos' for regex"
    (interactive)
    (denote-link-add-links my/regexp-denote-working-projects))

  (defun my-denote-link-add-maybe-projects ()
    "Use command `denote-link-add-links' with '_projetos' and
  '_maybe' for regex"
    (interactive)
    (denote-link-add-links my/regexp-denote-maybe-projects))
#+end_src

*** Toggle Maybe/Working Projects
:PROPERTIES:
:Created:  2023-10-04
:END:
#+begin_src emacs-lisp
  (defun my--denote-keyword-remove (keyword)
    (if-let* ((file (buffer-file-name))
              ((denote-file-is-note-p file))
              (file-type (denote-filetype-heuristics file)))
        (when-let* ((cur-keywords
                     (denote-retrieve-keywords-value file file-type))
                    ((or (listp cur-keywords)
                         (not (string-blank-p cur-keywords))))
                    (del-keyword `(,keyword)))
          (denote--rewrite-keywords
           file
           (seq-difference cur-keywords del-keyword)
           file-type)
          (denote-rename-file-using-front-matter file t))
      (user-error "Buffer not visiting a Denote file")))

  (defun my--denote-keyword-add (keyword)
    (denote-keywords-add `(,keyword)))

  (defun my-denote-toggle-project ()
    (interactive)
    (if-let* ((file (buffer-file-name))
              ((denote-file-is-note-p file))
              (file-type (denote-filetype-heuristics file))
              (keywords
               (denote-retrieve-keywords-value file file-type)))
        (cond ((member "maybe" keywords)
               (progn 
                 (my--denote-keyword-add "working")
                 (my--denote-keyword-remove "maybe")))
              ((member "working" keywords)
               (progn
                 (my--denote-keyword-add "maybe")
                 (my--denote-keyword-remove "working")))
              (t (my--denote-keyword-add "working")))
      (user-error "Buffer not visiting a Denote file")))
#+end_src

*** Get file paths of Projects
:PROPERTIES:
:Created:  2023-10-09
:END:

#+begin_src emacs-lisp

  (defun my--get-list-working-projects ()
    "Get list with file paths of working projects with Denote"

    (denote-directory-files-matching-regexp my/regexp-denote-working-projects))

  (defun my--get-list-maybe-projects ()
    "Get list with file paths of working projects with Denote"

    (denote-directory-files-matching-regexp my/regexp-denote-maybe-projects))
#+end_src

** Organizating Blog
:PROPERTIES:
:Created:  2023-10-12
:END:

*** Blog Post Template
:PROPERTIES:
:Created:  2023-10-12
:END:
#+begin_src emacs-lisp
    (setq denote-org-capture-specifiers (concat "%i\n"
                                                "%?\n\n"
                                                "* References\n"
                                                "- file:%F\n\n"
                                                "* Updates\n"
                                                "%u\n\n"
                                                "Created blog post\n\n"
                                                "====================\n"))
#+end_src
*** Create new blog post
:PROPERTIES:
:Created:  2023-10-12
:END:
#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("n" "New note (with Denote)" plain
                   (file denote-last-path)
                   (function
                    (lambda ()
                      ;; parallel bind
                      (let ((denote-directory my/blog-directory))
                        (denote-org-capture))))
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))
#+end_src
** Organizating Notes
:PROPERTIES:
:Created:  2023-10-19
:END:

*** Get Identifier for Current Buffer
:PROPERTIES:
:Created:  2023-10-19
:END:

#+begin_src emacs-lisp
  (defun my-denote-get-current-identifier ()
    "Get denote identifier for current buffer"
    (denote-retrieve-filename-identifier (buffer-file-name (current-buffer))))
#+end_src

* Updates
:PROPERTIES:
:Created:  2023-10-19
:END:

[2023-10-19 Thu]
Create function to get current buffer identifier

==============================
