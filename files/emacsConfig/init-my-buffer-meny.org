#+TITLE:        Buffer Menu Configuration
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2019-09-03 ter]
#+DATE-UPDATED: [2019-09-22 dom]


Create a Buffer Menu so that my function, that I don't use them very
often don't go into oblivion. Making them appear in a simple, more
meaningful way.

* Variables
:PROPERTIES:
:ID:       ae35d493-ed68-4dc0-aafd-b834e6de8e0d
:END:

Variables needed to create the buffer menu and to know where to came
back after the function is done.

#+BEGIN_SRC emacs-lisp
  (defvar my/menu-buffer-call nil
    "Buffer that called menu, to go back to it after it is done")

  (defvar my/menu-window-call nil
    "Window that called menu, to go back to it after it is done")

  (defvar my/menu-buffer-name "*Start Menu*"
    "Name of the buffer that called, to go back to the right place")

#+END_SRC

** Data Structure
:PROPERTIES:
:ID:       fd992088-7b53-491e-a286-37502477f5e8
:END:

I need some kind of data structure to hold the relationship between
the line and the function in that line.
#+BEGIN_SRC emacs-lisp
  (defvar my/menu-buffer-hash-table (make-hash-table :test 'equal)
    "Hash table to hold the relation between number line and function to execute")

#+END_SRC

** Menu Initial Message
:PROPERTIES:
:ID:       5c8e3e3c-97f0-453c-9f4f-f8e2f2e567f9
:END:


Message to appear in the buffer menu. There will be a header that will
not change, it tells how the buffer menu works and how to use it.

The initial message is going to be changed later with each new
function added to menu.

#+BEGIN_SRC emacs-lisp
  (defvar my/menu-buffer-message "
  Emacs Start Menu

  Hitting [x] in any line executes the command behind it.
  \n\n"
    "Message that will appear in Buffer Message")


#+END_SRC

* Buffer Mode
:PROPERTIES:
:ID:       e8a4fbe4-5ed6-46db-b8a4-15e5ed886b2f
:END:

Create a major mode to hold all keybindings and special configurations
for this menu.

#+BEGIN_SRC emacs-lisp
  (define-derived-mode start-menu-mode special-mode "Emacs Start Menu"
    "A major mode for a buffer with the Emacs Start Menu.")

#+END_SRC

** Helper Functions
:PROPERTIES:
:ID:       d83f6819-c8d1-4793-bd61-16d9034f6b9b
:END:

Helper essential functions that without the menu buffer would not work
properly.

*** Add Text in the Menu
:PROPERTIES:
:ID:       1a31fa92-05be-4324-a1b9-d6f6f656b2e1
:END:

Functions to add text to the menu buffer. Other than adding text this
part is responsible to link the text to a specific function.

#+BEGIN_SRC emacs-lisp
  (defun my-menu-get-last-line ()
    "Get the number of of the last line in my/menu-buffer-message"
    (let ((lines 0))
      (with-temp-buffer
        (insert my/menu-buffer-message)
        (setq lines (count-lines (point-min) (point-max))))
        lines))

  (defun my-menu-add-doc (doc func change-buffer)
    "I add DOC to function menu list"
    (let ((item (concat "* " doc "\n"))
          (num-line (my-menu-get-last-line)))

      ;; Put number as the key in the hash table
      (puthash num-line (list change-buffer `,func) my/menu-buffer-hash-table)

      ;; Just put the item in the menu
      (setq my/menu-buffer-message (concat my/menu-buffer-message
                                           item))))

  (defun my-menu-add-doc-line ()
    (let ((line "===========================================\n"))
      (setq my/menu-buffer-message (concat my/menu-buffer-message line))))

#+END_SRC

*** Functions to Execute Line
:PROPERTIES:
:ID:       2d32fab7-108d-4f0f-9056-f48ddcdeef5e
:END:

Function to execute the function linked to a line.

#+BEGIN_SRC emacs-lisp
  (defun my-menu-get-line ()
    "Get current line"
    (count-lines (point-min) (point)))

  (defun my-menu-execute-line ()
    "Execute the function in current line"
    (interactive)
    (let* ((num-line (my-menu-get-line))
           (var (gethash num-line my/menu-buffer-hash-table))
           (change-buffer (car var))
           (valor (cadr var)))
      (call-interactively (my-menu-call-command valor change-buffer))))

#+END_SRC

*** Add Functions
:PROPERTIES:
:ID:       0c0d9d29-dadc-4d2c-b9cb-e8d54a47587d
:END:

The most important part, the execution of the functions part. It needs
to switch to the correct buffer and execute the selected function.

#+BEGIN_SRC emacs-lisp
  (defun my-menu-call-command (func &optional change-buffer)
    "Return an interactive function that executes FUNC in the menu buffer.

  if CHANGE-BUFFER is non-nil executes the command in the buffer that called buffer menu."
    `(lambda ()
       (interactive)

       ;; Check to see how to delete buffer menu without changing the
       ;; user window configuration
       (setq my/menu-number-of-windows (- my/menu-number-of-windows (count-windows)))
       (if (equal my/menu-number-of-windows 0)
           (switch-to-prev-buffer)
         (delete-window (get-buffer-window my/menu-buffer-name)))

       ;; Kill buffer menu
       (kill-buffer my/menu-buffer-name)

       (when ,change-buffer
         ;; Go back to calling window
         (select-window my/menu-window-call))

       ;; Execute what need to be executed
       (call-interactively #',func)

       ;; Reset control variables
       (setq my/menu-buffer-call nil)
       (setq my/menu-window-call nil)))


  (defun my-menu-add-function(doc key func &optional change-buffer)
    "Add FUNC to the start-menu-mode-map in KEY, also insert DOC in the buffer menu.

  pass CHANGE-BUFFER to my-menu-call-command."
    (when key
      (define-key start-menu-mode-map (kbd key) (my-menu-call-command `,func `,change-buffer)))
    (my-menu-add-doc doc `,func `,change-buffer))
#+END_SRC

* Menu Functions
:PROPERTIES:
:ID:       9ffe670a-b965-4862-8bf7-847df522c827
:END:

List of Functions that will go on buffer menu.

Make "x" execute command in the current line.
#+BEGIN_SRC emacs-lisp
  (define-key start-menu-mode-map (kbd "x") 'my-menu-execute-line)

#+END_SRC


More common commands.
#+BEGIN_SRC emacs-lisp
  (my-menu-add-function "[G] Grep Notes" "G" 'my-grep-notes)
  (my-menu-add-function "[g] Grep Directory" "g" 'my-grep-directory)
  (my-menu-add-function "[T] Open current directory in a Terminal" "T" 'xah-open-in-terminal t)
  (my-menu-add-function "[i] Start a Ispell process" "i" 'ispell t)

  (defun my-open-emacs ()
    (interactive)
    (start-process "another-emacs" " *another-emacs-buffer*" "emacs"))
  (my-menu-add-function "[E] Open another Emacs" "E" 'my-open-emacs)

  (my-menu-add-doc-line)

#+END_SRC

Not so common commands.
#+BEGIN_SRC emacs-lisp
  (my-menu-add-function "[s] Sort Org Heading" "s" 'my-sort-org-headings t)
  (my-menu-add-function "[S] Save Buffers" "S" 'save-some-buffers)
  (my-menu-add-doc-line)

  (my-menu-add-function "[p] Trim all unecessary Whitespace from Buffer" "p" 'user--clean-buffer t)
  (my-menu-add-function "[r] Rename Buffer and File" "r" 'lunaryorn-rename-file-and-buffer t)
  (my-menu-add-doc-line)

#+END_SRC

Commands without a key attached to.
#+BEGIN_SRC emacs-lisp
  (my-menu-add-function "Go to a random line" nil 'my-goto-random-line t)
  (my-menu-add-function "Ledger Monthly Balance" nil 'my-ledger-monthly-balance)
  (my-menu-add-doc-line)

#+END_SRC

* Main Function to Call Buffer Menu
:PROPERTIES:
:ID:       52c946dc-8843-41c3-8edf-960e074c2049
:END:

Main function to call the Buffer Menu, it setup the calling buffer and
insert all necessary information in the buffer menu.

#+BEGIN_SRC emacs-lisp
  (defun my-menu-function ()
    "Create a Buffer Menu"
    (interactive)

    ;; Set control variables
    (setq my/menu-buffer-call (buffer-name))
    (setq my/menu-window-call (get-buffer-window my/menu-buffer-call))
    (setq my/menu-number-of-windows (count-windows))

    ;; Go to buffer menu
    (switch-to-buffer-other-window (get-buffer-create my/menu-buffer-name))

    ;; Remove everthing there
    (erase-buffer)

    ;; Insert buffer menu message
    (insert my/menu-buffer-message)

    ;; Apply buffer menu mode
    (start-menu-mode))

#+END_SRC

* Define Key to Open Buffer Menu
:PROPERTIES:
:ID:       30e84b9d-7b2e-42a1-91b4-219a7cf14db3
:END:

Make M-e open Buffer Menu.

#+BEGIN_SRC emacs-lisp
  (define-key my/keymap (kbd "M-e") 'my-menu-function)

#+END_SRC
