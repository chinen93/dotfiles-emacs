
#+TITLE:        Completion Configuration
#+AUTHOR:       Pedro Chinen
#+EMAIL:        ph.u.chinen@gmail.com
#+DATE-CREATED: [2019-09-22 dom]
#+DATE-UPDATED: [2024-01-31 Wed]

#+begin_src emacs-lisp

  ;; A few more useful configurations...
  ;;(use-package emacs :init
  ;; TAB cycle if there are only few candidates (setq
  ;;  completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current
  ;; mode.  Corfu commands are hidden, since they are not supposed to
  ;; be used via M-x.  (setq read-extended-command-predicate
  ;; #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.  (setq
  ;; tab-always-indent 'complete))

#+end_src

* Company
:PROPERTIES:
:Created:  2023-12-06
:END:
#+BEGIN_SRC emacs-lisp

  (use-package company
    :ensure t

    :custom
    (company-minimum-prefix-length 2)
    (company-tooltip-align-annotations t)
    (company-require-match 'never)

    ;; Don't use company in the following modes
    (company-global-modes '(not shell-mode eaf-mode))

    ;; Trigger completion immediately.
    (company-idle-delay 0.3)

    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t)
    (company-dabbrev-code-everywhere t)
    (company-dabbrev-code-ignore-case)
    (company-dabbrev-code-other-buffers t)
    (company-dabbrev-downcase nil)

    :config
    (setq company-transformers '(company-sort-by-occurrence
                                 company-sort-by-backend-importance))
    (global-company-mode 1))

  (use-package company-quickhelp
    :ensure t

    :config
    (company-quickhelp-mode))
#+END_SRC

** CANCELED Configure
:PROPERTIES:
:ID:       a572722d-0e69-449f-9571-b801880ecd7e
:END:

Set delay to start completition
#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0.5)
  (setq company-echo-delay 0)

#+END_SRC

Keep the return of company as-is
#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase nil)

#+END_SRC

Minimimum size to start to search for match
#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 3)
  (setq company-selection-wrap-around t)

#+END_SRC

Sort matches by occurrence and backend importance
#+BEGIN_SRC emacs-lisp
  (setq company-transformers '(company-sort-by-occurrence
                               company-sort-by-backend-importance))

#+END_SRC

** CANCELED Hooks
:PROPERTIES:
:ID:       31d817f0-e087-4bf4-b94e-537070ceae87
:END:

Start mode globally
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'global-company-mode)

#+END_SRC

* CANCELED Corfu
:PROPERTIES:
:Created:  2024-01-30
:END:

#+begin_src emacs-lisp

  ;; (use-package corfu
  ;;   :ensure t
  ;;   :custom
  ;;   ;; Works with `indent-for-tab-command'. Make sure tab doesn't indent when you
  ;;   ;; want to perform completion
  ;;   (tab-always-indent 'complete)
  ;;   (completion-cycle-threshold nil)      ; Always show candidates in menu
  ;;   (corfu-auto nil)
  ;;   (corfu-auto-prefix 2)
  ;;   (corfu-auto-delay 0.25)
  ;;   ;; (corfu-min-width 80)
  ;;   ;; (corfu-max-width corfu-min-width)     ; Always have the same width
  ;;   (corfu-count 14)
  ;;   (corfu-scroll-margin 4)
  ;;   (corfu-cycle nil)
  ;;   ;; (corfu-echo-documentation nil)        ; Already use corfu-doc
  ;;   (corfu-separator ?\s)                 ; Necessary for use with orderless
  ;;   (corfu-quit-no-match 'separator)
  ;;   (corfu-preview-current 'insert)       ; Preview current candidate?
  ;;   (corfu-preselect-first t)             ; Preselect first candidate?
  ;;   :init
  ;;   (corfu-indexed-mode)
  ;;   (global-corfu-mode)
  ;;   (corfu-popupinfo-mode))


  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-preview-current nil)
    (corfu-auto-delay 0.2)
    (corfu-popupinfo-delay '(0.4 . 0.2))
    :custom-face
    (corfu-border ((t (:inherit region :background unspecified))))
    :bind ("M-/" . completion-at-point)
    :hook ((after-init . global-corfu-mode)
           (global-corfu-mode . corfu-popupinfo-mode)))
#+end_src

** CANCELED Cape
:PROPERTIES:
:Created:  2024-01-30
:END:

#+begin_src emacs-lisp
  ;; ;; Add extensions
  ;; (use-package cape
  ;;   :ensure t
  ;;   :init
  ;;   ;; Add to the global default value of `completion-at-point-functions' which is
  ;;   ;; used by `completion-at-point'.  The order of the functions matters, the
  ;;   ;; first function returning a result wins.  Note that the list of buffer-local
  ;;   ;; completion functions takes precedence over the global list.
  ;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;;   (add-to-list 'completion-at-point-functions #'cape-file)
  ;;   (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;   (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;   (add-to-list 'completion-at-point-functions #'cape-dict)
  ;;   ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;   (add-to-list 'completion-at-point-functions #'cape-line)
  ;; )


  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)

    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))

#+end_src

** CANCELED Company
:PROPERTIES:
:Created:  2024-01-30
:END:

#+begin_src emacs-lisp

;;(require 'company)
;; Use the company-dabbrev and company-elisp backends together.
;;(setq completion-at-point-functions
;;      (list
;;       (cape-company-to-capf
;;        (apply-partially #'company--multi-backend-adapter
;;                         '(company-dabbrev company-elisp)))))

#+end_src
