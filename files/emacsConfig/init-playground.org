#+TITLE:        Playground for new Configurations
#+AUTHOR:       Pedro Chinen
#+EMAIL:        ph.u.chinen@gmail.com
#+DATE-CREATED: [2018-10-17 qua]
#+DATE-UPDATED: [2019-06-07 sex]

* Playground
:PROPERTIES:
:ID:       eabe7319-8572-481a-852d-1783fdc300f6
:END:

** CANCELED Ample-regexp
:PROPERTIES:
:ID:       ba1309ce-3cd8-4df9-a4be-c68c80f79756
:END:

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ample-regexps
    :ensure t)

  (when (featurep 'ample-regexps)
    (define-arx alnum-rx
    '((alpha_ (regexp "[[:alpha:]_]"))
      (alnum_ (regexp "[[:alnum:]_]")))) ;; -> alnum-rx

    (alnum-rx (+ alpha_) (* alnum_)) ;; -> "[[:alpha:]_]+[[:alnum:]_]*"
    )
#+END_SRC

** CANCELED Chris Barret Emacs.d
:PROPERTIES:
:ID:       d2b87ce5-8cb0-470b-88c3-9569a11b2cb1
:END:

https://github.com/chrisbarrett/.emacs.d

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package dumb-jump
    :general (:states 'normal :keymaps 'prog-mode-map "M-." #'dumb-jump-go)
    :config
    (progn
      (setq dumb-jump-selector 'ivy)))

  (setq ivy-use-virtual-buffers t)



  (autoload 'org-read-date "org")

  (setq ledger-master-file (file-truename "BLA"))

  (defun cb-ledger-insert-timestamp (date)
    "Insert DATE at point."
    (interactive (list (org-read-date)))
    (insert (s-replace "-" "/" date)))



  (setq org-export-backends '(ascii html latex odt gfm koma-letter custom-confluence)
        org-html-html5-fancy t
        org-html-postamble nil
        org-export-exclude-tags '("noexport" "no_export" "crypt")
        org-export-coding-system 'utf-8)


  (setq org-stuck-projects '("+project-ignore-maybe-done" ("TODO") nil))

  (setq org-agenda-sorting-strategy '((agenda time-up priority-down category-keep)
                                      (todo priority-down category-keep scheduled-up)
                                      (tags priority-down category-keep)
                                      (search category-keep)))

  (setq org-agenda-tags-column -100)
  (setq org-agenda-use-time-grid nil)

  '(("A" "Agenda and next actions"
     ((tags-todo "-study-someday-media-gtd/TODO"
                 ((org-agenda-overriding-header "Next Actions")
                  ;; Take the first item from each todo list. Also
                  ;; exclude items with scheduled/deadline times, since
                  ;; they show up in the calendar views.
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (agenda "")
      (todo "WAITING"
            ((org-agenda-overriding-header "Waiting")))
      (stuck "")
      (tags-todo "media|study/TODO"
                 ((org-agenda-overriding-header "Media & Study"))))
     ((org-agenda-tag-filter-preset '("-ignore"))
      (org-agenda-files (list org-default-notes-file org-agenda-diary-file))
      (org-agenda-archives-mode nil)
      (org-agenda-ignore-drawer-properties '(effort appt))))

    ("r" "Weekly Review"
     ((agenda ""
              ((org-agenda-overriding-header "Review Previous Week")
               (org-agenda-ndays 7)
               (org-agenda-start-day "-7d")))
      (agenda ""
              ((org-agenda-overriding-header "Review Upcoming Events")
               (org-agenda-ndays 14)))
      (stuck ""
             ((org-agenda-overriding-header "Review Stuck Projects")))
      (todo "WAITING"
            ((org-agenda-overriding-header "Review Tasks on Hold")))

      (tags-todo "-someday-media/TODO"
                 ((org-agenda-overriding-header "Next Actions")
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (tags-todo "+goals+3_months+project/TODO"
                 ((org-agenda-overriding-header "Review 3 Month Goals")
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (tags-todo "+goals+1_year+project/TODO"
                 ((org-agenda-overriding-header "Review 1 Year Goals")
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (tags-todo "+goals+3_years+project/MAYBE|SOMEDAY|TODO"
                 ((org-agenda-overriding-header "Review 3 Year Goals")
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (tags-todo "someday-skill/MAYBE|TODO"
                 ((org-agenda-overriding-header "Decide whether to promote any SOMEDAY items to TODOs")))
      (tags-todo "someday&skill"
                 ((org-agenda-overriding-header "Decide whether to promote any learning tasks to TODOs"))))
     ((org-agenda-tag-filter-preset
       '("-gtd" "-ignore"))
      (org-agenda-include-inactive-timestamps t)
      (org-agenda-files (list org-default-notes-file config-org-work-file org-agenda-diary-file))
      (org-agenda-archives-mode nil)))

    ("w" "Work actions"
     ((tags-todo "-study-someday-media-gtd/TODO"
                 ((org-agenda-overriding-header "Next Actions")
                  (org-agenda-skip-function (lambda ()
                                              (or (config-org--agenda-skip-if-has-timestamp)
                                                  (config-org--agenda-skip-all-siblings-but-first))))))
      (todo "WAITING"
            ((org-agenda-overriding-header "Waiting")))
      (stuck "")
      (agenda "")
      (tags "+standup"
            ((org-agenda-overriding-header "Standup"))))
     ((org-agenda-tag-filter-preset '("-ignore"))
      (org-agenda-use-tag-inheritance nil)
      (org-agenda-files (list config-org-work-file org-agenda-diary-file))
      (org-agenda-archives-mode nil)
      (org-agenda-ignore-drawer-properties '(effort appt)))))


  (use-package rg
    :straight t
    :commands rg
    :config
    (setq rg-group-result t))
#+END_SRC

Themes
https://github.com/chrisbarrett/.emacs.d/tree/master/themes

Lisp
https://github.com/chrisbarrett/.emacs.d/blob/ce14d312a4e089b03a3e478d08caf8a26faada85/lisp/yas-funcs.el
https://github.com/chrisbarrett/.emacs.d/blob/ce14d312a4e089b03a3e478d08caf8a26faada85/lisp/cb-diary-utils.el
https://github.com/chrisbarrett/.emacs.d/blob/ce14d312a4e089b03a3e478d08caf8a26faada85/lisp/buffer-cmds.el

Snippets
https://github.com/chrisbarrett/.emacs.d/tree/master/etc/yasnippet/snippets/c-mode
https://github.com/chrisbarrett/.emacs.d/tree/master/etc/yasnippet/snippets/emacs-lisp-mode
https://github.com/chrisbarrett/.emacs.d/tree/master/etc/yasnippet/snippets/ledger-mode
https://github.com/chrisbarrett/.emacs.d/tree/master/etc/yasnippet/snippets/snippet-mode
** CANCELED Jmartin84 Emacs.d
:PROPERTIES:
:ID:       7ec97753-faff-41d4-8e74-019666132239
:END:
https://github.com/jmartin84/my-macs/tree/b681eaddc57e2fe379d2f1f579905527e7e87429
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar emacs-dir (file-truename user-emacs-directory) "Path to Emacs dir.")
  (defvar modules-dir (concat emacs-dir "modules/") "Path to modules dir.")

  (eval-when-compile
  (require 'use-package))

  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :after (all-the-icons)
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** CANCELED iBuffer
:PROPERTIES:
:ID:       9961b667-fc34-4b0a-9596-b46c2b59b5ab
:END:
http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/
https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (setq ibuffer-saved-filter-groups
  ;;       '(("home"
  ;;          ("emacs-config" (or (filename . ".emacs.d")
  ;;                              (filename . "emacs-config")))
  ;;          ("martinowen.net" (filename . "martinowen.net"))
  ;;          ("Org" (or (mode . org-mode)
  ;;                     (filename . "OrgMode")))
  ;;          ("code" (filename . "code"))
  ;;          ("Web Dev" (or (mode . html-mode)
  ;;                         (mode . css-mode)))
  ;;          ("Subversion" (name . "\*svn"))
  ;;          ("Magit" (name . "\*magit"))
  ;;          ("ERC" (mode . erc-mode))
  ;;          ("Help" (or (name . "\*Help\*")
  ;;                      (name . "\*Apropos\*")
  ;;                      (name . "\*info\*"))))))

  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))

                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))

  (setq ibuffer-expert t)

  (setq ibuffer-show-empty-filter-groups t)

  (setq ibuffer-default-sorting-mode 'major-mode)

  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

** CANCELED Jay Kamat Emacs.d
:PROPERTIES:
:ID:       fc849fe7-2cb0-4c9f-bd29-dab0a798f8f5
:END:

#+BEGIN_SRC emacs-lisp :tangle no
  (setq scroll-step 1
        auto-window-vscroll nil
        scroll-conservatively 10000
        scroll-margin 0
        scroll-up-aggressively 0.00
        scroll-down-aggressively 0.0
        mouse-wheel-progressive-speed nil)

  (cond
   ((find-font (font-spec :name "Monoid"))
    (set-frame-font "Monoid-9" nil t))
   ((find-font (font-spec :name "DejaVu Sans Mono"))
    (set-frame-font "DejaVu Sans Mono-10" nil t))
   ((find-font (font-spec :name "Terminus"))
    (set-frame-font "Terminus-12" nil t))
   (t
    ;; We can't do squat
    (message "You don't have any good fonts installed!")))




  (require 'browse-url)
  (require 'shr)
  (setq browse-url-browser-function (apply-partially 'jay/browse-url-generic nil)
        shr-external-browser (apply-partially 'jay/browse-url-generic t)
        ;; If you just want qb
        ;; browse-url-browser-function #'browse-url-generic
        browse-url-generic-program "qutebrowser")

  (defvar jay/video-regexp)
  (setq jay/video-regexp (regexp-opt '("youtube.com" "youtu.be")))
  (defvar jay/music-regexp)
  (setq jay/music-regexp "mp[34]$")

  (defun jay/browse-url-generic (external url &rest _)
    "Browse to URL via jumplist.

  EXTERNAL whether this function should go to an external browser if needed."
    (cond
     ((or (string-match jay/video-regexp url)
          (string-match jay/music-regexp url))
      ;; Play in MPV
      (let* ((browse-url-generic-program "mpv")
             (browse-url-generic-args '("--profile=web")))
        (browse-url-generic url)))
     (t (if external
            (browse-url-generic url)
          (w3m-browse-url url)))))



  (defvar split-height-abs-threshold 15
    "If a window is shorter than this, exclude it from ALL splitting, not just horizontal.
  Great for thin compile buffers")
  (defun jay/splittable-advice (fun win &optional horizontal)
    (if (<= (window-height win) split-height-abs-threshold)
        nil
      (funcall fun win horizontal)))
  (advice-add 'window-splittable-p :around #'jay/splittable-advice)


  ;;syntax highlight code blocks
    (setq org-log-done t
          org-log-repeat nil
          org-cycle-include-plain-lists 'integrate ;; Cycle through plain lists
          org-archive-default-command #'org-archive-subtree
          org-pretty-entities t
          org-src-fontify-natively t
          org-return-follows-link t
          org-link-frame-setup
          (quote
           ((vm . vm-visit-folder)
            (vm-imap . vm-visit-imap-folder)
            (gnus . gnus)
            (file . find-file)
            (wl . wl))))

#+END_SRC


Criation of  file with all CONSTANTS
https://gitlab.com/jgkamat/dotfiles/blob/master/emacs/.emacs.d/lisp/jay-constants.el
