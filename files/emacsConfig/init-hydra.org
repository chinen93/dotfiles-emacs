#+TITLE:        Hydra Configuration
#+AUTHOR:       Pedro Chinen
#+DATE-CREATED: [2016-06-29 Wed]
#+DATE-UPDATED: [2022-01-04 ter]

Emacs has a lot of keybindings, and I can't remember everyone of
them. For example each key in the keyboard is related to a command, if
you put it in combination with Ctrl or Meta or Ctrl + Meta you can
create others keybindings for functions. And the problem grows fast
and wide. Each mode has a map describing some keybinding
configurations that can overwrite others configurations. So I wan't
always sure about the key chord I was pressing.

To solve this problem I found this package called: [[https://github.com/abo-abo/hydra][Hydra]].

The site tells that:
#+BEGIN_SRC text
  This is a package for GNU Emacs that can be used to tie related
  commands into a family of short bindings with a common prefix

  - a Hydra.
#+END_SRC

In reality what it does is simple it creates a configuration that
won't be overwritten by a mode key map. Because I can tell which
commands are going to be on my hydra family and which key chords I
want them to be.

First things first we need to load the package so that we can build
some configurations on top of it.
#+BEGIN_SRC emacs-lisp
  (require-package 'hydra)

#+END_SRC
* Provide File
:PROPERTIES:
:ID:       0a01efe1-3948-4017-b344-38ecef7b2a48
:END:
#+BEGIN_SRC emacs-lisp
  (provide 'init-hydra)
#+END_SRC
* Principal Launcher
:PROPERTIES:
:ID:       2eeb3eeb-dd07-4cab-88f3-9ca9da35af21
:END:

#+BEGIN_SRC emacs-lisp
        ;;; Hydra launcher BEGIN
  (defhydra hydra-launcher (:color amaranth :hint nil)
    "
     ^Functions^         ^Favorites  ^      ^Hydra Menus^
    -^---------^---------^-----------^------^-----------^---
     _d_: Toggle daily   _b_: iBuffer       _f_: Functions
     _V_: Bookmark set   _v_: Bookmarks     _y_: YASnippet
     _c_: Capture        _g_: Magit         _p_: Projectile
     _F_: Org Roam Find  _l_: Ledger        _s_: Other Menus
     ^ ^                 _m_: Agenda

     _e_: Hydra Context
    "

    ;; Functions
    ("w" whitespace-mode)
    ("V" bookmark-set :color blue)
    ("d" isamert/toggle-side-bullet-org-buffer)
    ("c" org-capture :color blue)

    ;; Favorites
    ("l" ledger-report :color blue)
    ("b" ibuffer :color blue)
    ("g" magit-status :color blue)
    ("v" bookmark-bmenu-list :color blue)
    ("m" org-agenda :color blue)
    ("F" org-roam-node-find :color blue)

    ;; Hydras Menus
    ("f" hydra-functions/body :color blue)
    ("y" hydra-yasnippet/body :color blue)
    ("p" hydra-projectile/body :color blue)
    ("s" hydra-other-hydras-menus/body :color blue)

    ("e" hydra-context-launcher :color blue)

    ;; Hidden letters and commands that can still be used when the Hydra is open.
    ("0" delete-window :color blue)
    ("1" delete-other-windows :color blue)
    ("2" split-window-below :color blue)
    ("3" split-window-right :color blue)
    ("<right>" forward-char)
    ("<left>" backward-char)
    ("<down>" next-line)
    ("<up>" previous-line)
    ("C-<SPC>" set-mark-command)
    ("<home>" move-beginning-of-line)
    ("<end>" move-end-of-line)
    ("<RET>" nil :color blue)
    ("<ESC>" nil :color blue)

    ("q" nil "cancel" :color blue))
#+END_SRC

* Other Hydras Menus
#+begin_src emacs-lisp

  (defhydra hydra-other-hydras-menus (:color blue :columns 4)

      ("(" hydra-macro/body "Macros" :color blue)
      ("z" hydra-zoom/body "Zoom" :color blue)
      ("N" hydra-narrow-widen/body "Narrow/Widen" :color blue)
      ("n" hydra-narrow-widen/body "Narrow/Widen" :color blue)
      ("h" hydra-help/body "Help" :color blue)
      ("r" hydra-rectangle/body "Rectangle" :color blue)
      ("F" hydra-flycheck/body "FlyCheck" :color blue)
      ("L" hydra-math/body "Math Symbols" :color blue)

      ("q" nil "cancel" :color blue))
#+end_src
* Narrow Widen Indirect Buffer
:PROPERTIES:
:ID:       95c4f5ce-7841-4ca3-9a7d-d117fe0f32dd
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-narrow-widen (:color pink :hint nil)
    "
     ^Narrow / Widen Indirect Buffers^
    -^-^-----------------------------------------------------------
     _n_: Narrow / Widen Indirect Buffer
     _r_: Rename Indirect Buffer
     _k_: Kill Indirect Buffer
    "
    ("n" (call-interactively #'my-indirect-buffer-narrow-or-widen-dwim) :color blue)
    ("r" (call-interactively #'my-indirect-buffer-rename) :color blue)
    ("k" (call-interactively #'my-indirect-buffer-kill) :color blue)
    ("q" nil "cancel" :color blue))
#+END_SRC

* Zoom
:PROPERTIES:
:ID:       a612d1b6-c93f-4cb9-bf5b-2787225d62ef
:END:

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom (:color pink)
    "
   ^Zoom^
  -^----^-----------------------------------------------------
  "
    ("=" text-scale-increase nil)
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (text-scale-set 0) "remove")

    ("q" nil "quit" :color blue)
    ("l" hydra-launcher/body "return" :color blue))

#+END_SRC

* Smerge Mode
:PROPERTIES:
:Created:  2021-12-29
:ID:       b31ab4bb-6d56-45d7-8007-364e9621969b
:END:
#+begin_src emacs-lisp
  (use-package smerge-mode
    :config
    (defhydra unpackaged/smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body)))))
#+end_src
* Flycheck
:PROPERTIES:
:ID:       d9197a4c-76fe-4877-b2a0-74c95efbcde1
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-flycheck (:color blue)
    "
    ^
    ^Flycheck^          ^Errors^            ^Checker^
    ^────────^──────────^──────^────────────^───────^─────
    _q_ quit            _<_ previous        _?_ describe
    _M_ manual          _>_ next            _d_ disable
    _v_ verify setup    _f_ check           _m_ mode
    ^^                  _l_ list            _s_ select
    ^^                  ^^                  ^^
    "
    ("q" nil)
    ("<" flycheck-previous-error :color pink)
    (">" flycheck-next-error :color pink)
    ("?" flycheck-describe-checker)
    ("M" flycheck-manual)
    ("d" flycheck-disable-checker)
    ("f" flycheck-buffer)
    ("l" flycheck-list-errors)
    ("m" flycheck-mode)
    ("s" flycheck-select-checker)
    ("v" flycheck-verify-setup))
#+END_SRC

* Help
:PROPERTIES:
:ID:       d9d72056-937d-4a64-9309-09e58a49570c
:END:

When asking for help, normally it means that I need some description of a function, variable, mode or about what function I've just typed or what was written on the Message buffer.

How it should be:
#+BEGIN_SRC text
   Help
  ----------------------------------------------------------
   f: function
   v: variable
   m: mode
   l: view lossage
   M: view Messages

#+END_SRC

How to create it:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-help (:color pink)
    "
   ^Help^
  -^----^-----------------------------------------------------
   _f_: function
   _v_: variable
   _m_: mode
   _l_: view lossage
   _M_: view Messages

"

    ("M" view-echo-area-messages :color blue)
    ("f" describe-function :color blue)
    ("v" describe-variable :color blue)
    ("m" describe-mode :color blue)
    ("l" view-lossage :color blue)

    ("q" nil "quit" :color blue)
    ("l" hydra-launcher/body "return" :color blue))

#+END_SRC

* Custom Functions
:PROPERTIES:
:ID:       038b598e-f4c9-434b-9d34-53596ba4e801
:END:

** Internet and Others Functions
:PROPERTIES:
:ID:       3cae0483-c78e-4dc0-b757-a8292d9788b2
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra eos/hydra-about-emacs ()
    "
      About Emacs                                                        [_q_] quit
      ^^--------------------------------------------------------------------------
      PID:             %s(emacs-pid)
      Uptime:          %s(emacs-uptime)
      Init time:       %s(emacs-init-time)
      Directory:       %s(identity user-emacs-directory)
      Invoked from:    %s(concat invocation-directory invocation-name)
      Version:         %s(identity emacs-version)

      User Info
      ^^--------------------------------------------------------------------------
      User name:       %s(user-full-name)
      Login (real):    %s(user-login-name) (%s(user-real-login-name))
        UID (real):    %s(user-uid) (%s(user-real-uid))
        GID (real):    %s(group-gid) (%s(group-real-gid))
      Mail address:    %s(identity user-mail-address)

      System Info
      ^^--------------------------------------------------------------------------
      System name:     %s(system-name)
      System type:     %s(identity system-type)
      System config:   %s(identity system-configuration)
      "
    ("q" nil nil))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-functions (:color amaranth :hint nil)
    "
            Useful Functions
    ^--------^------------------^-^----------------------^-------^-------------
    ^Actions:^                  ^ ^                      ^Toggle:^

    _s_: Sort lines             _i_: Ispell word         _t_: Truncate lines
    _p_: Trim whitespaces       _I_: Ispell buffer       _f_: Fill paragraph
    _k_: Open file              ^ ^                      ^ ^
    _l_: Open Terminal          _d_: Define Word         ^ ^
    _r_: Query Replace Regexp   _a_: About Emacs         ^ ^

    _m_: My Hydra Functions

    "

    ("m" hydra-my-functions/body :color blue)

    ("p" (user--clean-buffer))

    ("r" query-replace-regexp)
    ("s" sort-lines)
    ("t" toggle-truncate-lines)
    ("f" endless-fill-or-unfill)
    ("k" xah-open-in-external-app :color blue)
    ("l" xah-open-in-terminal :color blue)

    ("i" phuc/ispell-dwim :color blue)
    ("I" ispell-buffer :color blue)
    ("d" define-word-at-point :color blue)
    ("a" eos/hydra-about-emacs/body :color blue)

    ;; move around text
    ("<right>" forward-char)
    ("<left>" backward-char)
    ("<down>" next-line)
    ("<up>" previous-line)
    ("C-<SPC>" set-mark-command)
    ("<home>" move-beginning-of-line)
    ("<end>" move-end-of-line)
    ("<RET>" nil :color blue)
    ("<ESC>" nil :color blue)

    ("q" nil "cancel" :color blue))

#+END_SRC

** My Functions
:PROPERTIES:
:ID:       040d5f42-c6dd-46d5-9944-4bc8722a2e7d
:END:

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-my-functions (:color amaranth :hint nil)
    "
    My Functions
    -----------------------------------------------------
  "

    ("n" my-find-notes "Find Notes" :color blue)
    ("G" my-grep-notes "Grep Notes" :color blue)
    ("g" my-grep-directory "Grep Current Directory" :color blue)
    ("s" my-sort-org-headings "Sort Org Headings" :color blue)
    ("o" my-open-file-explorer "Open File Explorer" :color blue)
    ("q" nil "quit" :color blue))
#+END_SRC
* Yasnippet
:PROPERTIES:
:ID:       b7bb22b6-00f5-4e7e-8c14-a1113f3e6358
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-yasnippet (:color blue :hint nil)
    "
            ^YASnippets^
    -----------------------------
     Actions:

    _i_: insert snippet
    _v_: visit snippet files
    _n_: new
    _r_: reload all

    "

    ("i" yas-insert-snippet)
    ("v" yas-visit-snippet-file :color blue)
    ("n" yas-new-snippet)
    ("r" yas-reload-all)
    ("q" nil "cancel" :color blue))
#+END_SRC

* Macro
:PROPERTIES:
:ID:       9a9b290b-b306-4902-b51e-e0f38b864dd7
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-macro (:color amaranth :hint nil)
    "
     ^Basic^
    -^-----^--------------------------------------
     _j_: Create new macro
     _k_: End creation of new macro
     _e_: Execute last macro
     _n_: Insert Counter
     _h_: Show last macro as elisp

    "

    ("j" kmacro-start-macro :color blue)
    ("k" kmacro-end-macro :colocr blue)
    ("e" kmacro-end-or-call-macro-repeat)
    ("n" kmacro-insert-counter)
    ("h" elmacro-show-last-macro :color blue)

    ;; move around text
    ("<right>" forward-char)
    ("<left>" backward-char)
    ("<down>" next-line)
    ("<up>" previous-line)

    ("q" nil "quit" :color blue))

#+END_SRC

* Rectangle
:PROPERTIES:
:ID:       11231805-dd9e-4d52-b6b8-5cf0ba418c33
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-rectangle (:color amaranth :hint nil)
    "
     ^Rectangle^
    --------------------------------------------
     _m_: mark region
     _k_: kill region
     _y_: yank region

    "
    ("m" rectangle-mark-mode nil)
    ("y" yank-rectangle nil)
    ("k" kill-rectangle nil)

    ("<right>" forward-char)
    ("<left>" backward-char)
    ("<down>" next-line)
    ("<up>" previous-line)
    ("<home>" move-beginning-of-line)
    ("<end>" move-end-of-line)
    ("<RET>" nil :color blue)
    ("<ESC>" nil :color blue)

    ("q" nil "quit" :color blue))

#+END_SRC

* Context Hydra
:PROPERTIES:
:ID:       ca1c9c51-872d-418e-bedb-ed3c278931ab
:END:
#+BEGIN_SRC emacs-lisp
  (defun hydra-context-launcher ()
    "A launcher for hydras based on the current context.

    https://dfeich.github.io/www/org-mode/emacs/2018/05/10/context-hydra.html
    "
    (interactive)
    (cl-case major-mode
      ('Buffer-menu-mode (hydra-buffer-menu/body))
      ('org-mode (let* ((elem (org-element-context))
                        (etype (car elem))
                        (type (org-element-property :type elem)))
                   (cl-case etype
                     (src-block (hydra-babel-helper/body))
                     (link (hydra-org-link-helper/body))
                     ((table-row table-cell) (hydra-org-table-helper/body) )
                     (t (message "No specific hydra for %s/%s" etype type)
                        (hydra-org/body))))
                 )
      (t (message "No hydra for this major mode: %s" major-mode))))

#+END_SRC

** Buffer Menu
:PROPERTIES:
:ID:       b3b8fba0-1331-4d0e-962e-f151b3b4debb
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-buffer-menu (:color pink :hint nil)
    "
     ^Mark^             ^Unmark^           ^Actions^          ^Search^
    -^----^-------------^------^-----------^-------^----------^------^---------
     _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
     _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
     _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
     _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
     _~_: modified

    "

    ("m" Buffer-menu-mark)
    ("u" Buffer-menu-unmark)
    ("U" Buffer-menu-backup-unmark)
    ("d" Buffer-menu-delete)
    ("D" Buffer-menu-delete-backwards)
    ("s" Buffer-menu-save)
    ("~" Buffer-menu-not-modified)
    ("x" Buffer-menu-execute)
    ("b" Buffer-menu-bury)
    ("T" Buffer-menu-toggle-files-only)
    ("O" Buffer-menu-multi-occur :color blue)
    ("I" Buffer-menu-isearch-buffers :color blue)
    ("R" Buffer-menu-isearch-buffers-regexp :color blue)
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)

    ("g" revert-buffer)

    ("c" nil "cancel")
    ("q" quit-window "quit" :color blue))

#+END_SRC

** Org Mode
:PROPERTIES:
:ID:       3ab0cde1-d6c7-46b7-9285-7438271fc53f
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org (:color amaranth :hint nil)
    "
     ^Roam^              ^Clock^         ^Heading^
    --------------------------------------------------------
     _r_: Insert Node    _i_: Clock In   _h_: Create ID
     _f_: Find Node      _o_: Clock Out
     _t_: Toggle Nodes
     _F_: Random Node

    "

    ;; Roam
    ("r" org-roam-node-insert :color blue)
    ("f" org-roam-node-find :color blue)
    ("t" org-roam-buffer-toggle :color blue)
    ("F" org-roam-node-random :color blue)

    ;; Clock
    ("i" org-clock-in :color blue)
    ("o" org-clock-out :color blue)

    ;; Heading
    ("h" org-id-get-create :color blue)

    ("q" nil "quit" :color blue))

#+END_SRC

*** Link Helper
:PROPERTIES:
:ID:       e5ac3fac-bcf0-4a8c-a098-a390021d0a0f
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org-link-helper (:color pink :hint nil)
    "
  org link helper
  _i_ backward slurp     _o_ forward slurp    _n_ next link
  _j_ backward barf      _k_ forward barf     _p_ previous link
  _t_ terminal at path
  _q_ quit
  "
    ("i" org-link-edit-backward-slurp)
    ("o" org-link-edit-forward-slurp)
    ("j" org-link-edit-backward-barf)
    ("k" org-link-edit-forward-barf)
    ("n" org-next-link)
    ("p" org-previous-link)
    ("t" dfeich/gnome-terminal-at-link :color blue)
    ("q" nil :color blue))

#+END_SRC

*** Table Helper
:PROPERTIES:
:ID:       c79dc46b-814f-4243-89dd-c1b369a046ce
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org-table-helper (:color pink :hint nil)
    "
  org table helper
  _r_ recalculate     _w_ wrap region      _c_ toggle coordinates
  _i_ iterate table   _t_ transpose        _D_ toggle debugger
  _B_ iterate buffer  _E_ export table
  _e_ eval formula    _s_ sort lines       _d_ edit field
  _q_ quit
  "
    ("E" org-table-export :color blue)
    ("s" org-table-sort-lines)
    ("d" org-table-edit-field)
    ("e" org-table-eval-formula)
    ("r" org-table-recalculate)
    ("i" org-table-iterate)
    ("B" org-table-iterate-buffer-tables)
    ("w" org-table-wrap-region)
    ("D" org-table-toggle-formula-debugger)
    ("t" org-table-transpose-table-at-point)

    ("c" org-table-toggle-coordinate-overlays :color blue)
    ("q" nil :color blue))

#+END_SRC

*** Babel Helper
:PROPERTIES:
:ID:       731ef39b-516e-439f-ab51-9e640ad6942c
:END:
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-babel-helper (:color pink :hint nil)
    "
  org babel src block helper functions
  _n_ next       _i_ info           _I_ insert header
  _p_ prev       _c_ check
  _h_ goto head  _E_ expand
  ^ ^            _s_ split
  _q_ quit       _r_ remove result  _e_ examplify region
  "
    ("i" org-babel-view-src-block-info)
    ("I" org-babel-insert-header-arg)
    ("c" org-babel-check-src-block :color blue)
    ("s" org-babel-demarcate-block :color blue)
    ("n" org-babel-next-src-block)
    ("p" org-babel-previous-src-block)
    ("E" org-babel-expand-src-block :color blue)
    ("e" org-babel-examplify-region :color blue)
    ("r" org-babel-remove-result :color blue)
    ("h" org-babel-goto-src-block-head)
    ("q" nil :color blue))

#+END_SRC

* Math
:PROPERTIES:
:ID:       5dda6f7f-c07e-4bb7-8e8d-3467bbdd5927
:END:

Hydra to easily insert greek letter and others math notations.

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-math (:color amaranth :hint nil)
      "
       ^Math Notation^
      --------------------------------------------
       _z_: ±     _x_: ÷     _c_: ∑     _v_: ∃
       _b_: ∄     _n_: ∀     _m_: ∈     _a_: ∉
       _s_: ∏     _d_: θ     _f_: π     _g_: σ
       _h_: φ     _j_: α     _k_: β
      "
      ("z" (lambda () (interactive)(insert "±"))  :color blue)
      ("x" (lambda () (interactive)(insert "÷"))  :color blue)
      ("c" (lambda () (interactive)(insert "∑"))  :color blue)
      ("v" (lambda () (interactive)(insert "∃"))  :color blue)
      ("b" (lambda () (interactive)(insert "∄"))  :color blue)
      ("n" (lambda () (interactive)(insert "∀"))  :color blue)
      ("m" (lambda () (interactive)(insert "∈"))  :color blue)
      ("a" (lambda () (interactive)(insert "∉"))  :color blue)
      ("s" (lambda () (interactive)(insert "∏"))  :color blue)
      ("d" (lambda () (interactive)(insert "θ"))  :color blue)
      ("f" (lambda () (interactive)(insert "π"))  :color blue)
      ("g" (lambda () (interactive)(insert "σ"))  :color blue)
      ("h" (lambda () (interactive)(insert "φ"))  :color blue)
      ("j" (lambda () (interactive)(insert "α"))  :color blue)
      ("k" (lambda () (interactive)(insert "β"))  :color blue)


      ;; Hydra expected behavior.
      ("<right>" forward-char)
      ("<left>" backward-char)
      ("<down>" next-line)
      ("<up>" previous-line)
      ("<home>" move-beginning-of-line)
      ("<end>" move-end-of-line)
      ("<RET>" nil :color blue)
      ("<ESC>" nil :color blue)
      ("q" nil "quit" :color blue))
#+END_SRC

* Projectile
#+begin_src emacs-lisp
  (defhydra hydra-projectile (:color blue :hint nil)
    "
      ^Projectile^
      ^-^-------------------------------------------
      _f_: Find File
      _g_: Grep
    "
    ("f" projectile-find-file)
    ("g" projectile-grep)
    )
#+end_src
